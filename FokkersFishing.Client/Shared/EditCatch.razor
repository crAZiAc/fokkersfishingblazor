@inject IHttpClientFactory ClientFactory
@inject HttpClient HttpClient

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Catch #: @currentCatch.CatchNumber</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="currentCatch">
            <p><MatTextField @bind-Value="@currentCatch.CatchNumber" ReadOnly="true" Label="Catch #" Disabled="true" FullWidth="false" Outlined="false" Dense="true" /></p>
            <p><MatTextField @bind-Value="@currentCatch.LogDate" ReadOnly="true" Disabled="true" Label="Log Date" FullWidth="false" Outlined="false" Dense="true" /></p>
            <p><MatDatePicker @bind-Value="@currentCatch.CatchDate" EnableTime="true" Label="Catch Date and Time" Enable24hours="true" EnableSeconds="false" EnableWeekNumbers="true" FullWidth="false" Outlined="false" Dense="true" /></p>
            <p><MatTextField @bind-Value="@currentCatch.Length" Label="Fish Length" FullWidth="false" Outlined="false" Dense="true" /></p>
            <p>
                <MatSelect Label="Fish Type" @bind-Value="currentCatch.Fish" FullWidth="false" Outlined="false" Dense="true">
                    @foreach (Fish fish in fishOptions)
                    {
                        <MatOptionString Value="@fish.Name">@fish.Name</MatOptionString>
                    }
                </MatSelect>
            </p>
            @if (!adminEdit)
            {
                <p>
                    <table>
                        <tr>
                            <td width="50px">
                                <MatFileUpload OnChange="@MeasureFilesReady" Label="Upload picture of catch with measure" AllowMultiple="false"></MatFileUpload>
                            </td>

                            <td width="25px">
                                @if (measureFile != null)
                                {
                                    <MatIcon Icon="check"></MatIcon>
                                }
                            </td>
                            <td width="100px">
                                @if (measureFile != null)
                                {
                                    <label>@selectedMeasureFileMessage</label>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td width="50px">
                                <MatFileUpload OnChange="@CatchFilesReady" Label="Upload picture of fish and fisherman" AllowMultiple="false"></MatFileUpload>
                            </td>

                            <td width="25px">
                                @if (catchFile != null)
                                {
                                    <MatIcon Icon="check"></MatIcon>
                                }
                            </td>
                            <td width="100px">
                                @if (catchFile != null)
                                {
                                    <label>@selectedCatchFileMessage</label>
                                }
                            </td>
                        </tr>
                    </table>
                </p>
            }
            else
            {
                <MatChipSet Choice="true" SelectedChipChanged="@StatusChanged">
                    <MatChip Label="Approved" LeadingIcon="@MatIconNames.Done_all" style="color: lightgreen;background-color: green" Value="CatchStatusEnum.Approved"></MatChip>
                    <MatChip Label="Pending" LeadingIcon="@MatIconNames.Schedule" style="color: lightyellow;background-color:#ffc107" Value="CatchStatusEnum.Pending"></MatChip>
                    <MatChip Label="Rejected" LeadingIcon="@MatIconNames.Pan_tool" style="color: darkgoldenrod;background-color:indianred" Value="CatchStatusEnum.Rejected"></MatChip>
                </MatChipSet>
                <p class="mt-2">Status: @currentCatch.Status.ToString()</p>
            }

        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(() => OnSave.InvokeAsync(catchFiles))" Class="btn btn-primary">Save</MatButton>
        <MatButton OnClick="@OnCancel" Class="btn btn-secondary" >Cancel</MatButton>
    </MatDialogActions>
</MatDialog>


@code {
    [Parameter] public Catch currentCatch { get; set; }
    [Parameter] public List<Fish> fishOptions { get; set; }
    [Parameter] public EventCallback<Dictionary<string, IMatFileUploadEntry>> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool HasChanged { get; set; }
    [Parameter] public bool dialogIsOpen { get; set; }
    [Parameter] public bool adminEdit { get; set; }


    Dictionary<string, IMatFileUploadEntry> catchFiles { get; set; } = new Dictionary<string, IMatFileUploadEntry>();
    IMatFileUploadEntry catchFile;
    IMatFileUploadEntry measureFile;

    string selectedMeasureFileMessage = string.Empty;
    string selectedCatchFileMessage = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        catchFiles.Add("measure", null);
        catchFiles.Add("catch", null);
    }

    void MeasureFilesReady(IMatFileUploadEntry[] files)
    {
        selectedMeasureFileMessage = $"Measure picture: {files[0].Name} - Size: {files[0].Size}";
        measureFile = files[0];
        catchFiles["measure"] = measureFile;
        this.StateHasChanged();
    }

    void CatchFilesReady(IMatFileUploadEntry[] files)
    {
        selectedCatchFileMessage = $"Name: {files[0].Name} - Size: {files[0].Size}";
        catchFile = files[0];
        catchFiles["catch"] = catchFile;
        this.StateHasChanged();
    }

    void StatusChanged(MatChip selectedChip)
    {
        currentCatch.Status = ((CatchStatusEnum)selectedChip.Value);
        this.StateHasChanged();
    }
}
