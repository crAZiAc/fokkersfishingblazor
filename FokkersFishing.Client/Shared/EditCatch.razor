@inject IHttpClientFactory ClientFactory
@inject HttpClient HttpClient

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Catch #: @currentCatch.CatchNumber</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="currentCatch">

            <div className="input-group input-group-sm mb-3">
                <div className="input-group-prepend" />
                <MatTextField @bind-Value="@currentCatch.CatchNumber" ReadOnly="true" Label="Catch #" Disabled="true" FullWidth="false" Outlined="false" />
                <MatTextField @bind-Value="@currentCatch.LogDate" ReadOnly="true" Disabled="true" Label="Log Date" FullWidth="false" Outlined="false" />
                <MatDatePicker @bind-Value="@currentCatch.CatchDate" EnableTime="true" Label="Catch Date and Time" Enable24hours="true" EnableSeconds="false" EnableWeekNumbers="true" FullWidth="false" Outlined="false" />
                <MatTextField @bind-Value="@currentCatch.Length" Label="Fish Length" FullWidth="false" Outlined="false" />
                <MatSelect Label="Fish Type" @bind-Value="currentCatch.Fish" FullWidth="false" Outlined="false">
                    @foreach (Fish fish in fishOptions)
                    {
                        <MatOptionString Value="@fish.Name">@fish.Name</MatOptionString>
                    }
                </MatSelect>
                <table>
                    <tr>
                        <td width="25%">
                            <MatFileUpload OnChange="@MeasureFilesReady" Label="Upload picture of catch with measure" AllowMultiple="false"></MatFileUpload>
                        </td>

                        <td width="25%">
                            @if (measureFile != null)
                            {
                                <MatIcon Icon="check"></MatIcon>
                            }
                        </td>
                        <td width="50%">
                            @if (measureFile != null)
                            {
                                <label>@selectedMeasureFileMessage</label>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td width="25%">
                            <MatFileUpload OnChange="@CatchFilesReady" Label="Upload picture of fish and fisherman" AllowMultiple="false"></MatFileUpload>
                        </td>

                        <td width="50%">
                            @if (catchFile != null)
                            {
                                <MatIcon Icon="check"></MatIcon>
                            }
                        </td>
                        <td width="50%">
                            @if (catchFile != null)
                            {
                                <label>@selectedCatchFileMessage</label>
                            }
                        </td>
                    </tr>
                </table>

            </div>

        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(() => OnSave.InvokeAsync(catchFiles))" Class="btn btn-primary">Save</MatButton>
        <MatButton OnClick="@OnCancel" Class="btn btn-secondary" s>Cancel</MatButton>
    </MatDialogActions>
</MatDialog>


@code {
    [Parameter] public Catch currentCatch { get; set; }
    [Parameter] public List<Fish> fishOptions { get; set; }
    [Parameter] public EventCallback<Dictionary<string, IMatFileUploadEntry>> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool HasChanged { get; set; }
    [Parameter] public bool dialogIsOpen { get; set; }


    Dictionary<string, IMatFileUploadEntry> catchFiles { get; set; } = new Dictionary<string, IMatFileUploadEntry>();
    IMatFileUploadEntry catchFile;
    IMatFileUploadEntry measureFile;


    string selectedMeasureFileMessage = string.Empty;
    string selectedCatchFileMessage = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        catchFiles.Add("measure", null);
        catchFiles.Add("catch", null);
    }

    void MeasureFilesReady(IMatFileUploadEntry[] files)
    {
        selectedMeasureFileMessage = $"Measure picture: {files[0].Name} - Size: {files[0].Size}";
        measureFile = files[0];
        catchFiles["measure"] = measureFile;
        this.StateHasChanged();
    }

    void CatchFilesReady(IMatFileUploadEntry[] files)
    {
        selectedCatchFileMessage = $"Name: {files[0].Name} - Size: {files[0].Size}";
        catchFile = files[0];
        catchFiles["catch"] = catchFile;
        this.StateHasChanged();
    }
}
