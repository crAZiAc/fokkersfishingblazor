@inject HttpClient HttpClient
<EditForm Model="currentCatch" OnValidSubmit="SaveCatch">
    
        <div className="input-group input-group-sm mb-3">
            <div className="input-group-prepend" />

            <MatTextField @bind-Value="@currentCatch.CatchNumber" ReadOnly="true" Label="Catch #" FullWidth="true" Outlined="false" />
        </div>

        <div className="input-group input-group-sm mb-3">
            <div className="input-group-prepend" />
            <MatTextField @bind-Value="@currentCatch.LogDate" ReadOnly="true" Label="Log Date" FullWidth="true" Outlined="false" />
        </div>

        <div className="input-group mb-3">
            <div className="input-group-prepend" />
            <MatDatePicker @bind-Value="@currentCatch.CatchDate" EnableTime="true" Label="Catch Date and Time" Enable24hours="true" EnableSeconds="false" EnableWeekNumbers="true" FullWidth="true" Outlined="false" />
        </div>

        <div className="input-group mb-3">
            <div className="input-group-prepend" />
            <MatSelect Label="Fish Type" @bind-Value="currentCatch.Fish" FullWidth="true" Outlined="false">
                @foreach (Fish fish in fishOptions)
                {
                    <MatOptionString Value="@fish.Name">@fish.Name</MatOptionString>
                }
            </MatSelect>
        </div>

        <div className="input-group mb-3">
            <div className="input-group-prepend" />
            <MatTextField @bind-Value="@currentCatch.Length" Label="Fish Length" FullWidth="true" Outlined="false" />
        </div>
    @if ( HasChanged )
    {
        <button type="submit" class="checkout-button btn btn-primary" @onclick="@OnSubmit">Save</button>
    }
    else
    {
        <button type="submit" class="checkout-button btn btn-secondary" @onclick="@OnSubmit">Save</button>
    }
</EditForm>

@code {
    [Parameter] public Catch currentCatch { get; set; }
    [Parameter] public List<Fish> fishOptions { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public bool HasChanged{ get; set; }

    private async Task SaveCatch()
    {
        currentCatch = await HttpClient.PutJsonAsync<Catch>("catch/" + currentCatch.RowKey, currentCatch);
        HasChanged = false;
        StateHasChanged();
    }
}
