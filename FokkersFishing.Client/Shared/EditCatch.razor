@inject IHttpClientFactory ClientFactory
@inject HttpClient HttpClient

<EditForm Model="currentCatch" OnValidSubmit="SaveCatch">

    <div className="input-group input-group-sm mb-3">
        <div className="input-group-prepend" />
        <MatTextField @bind-Value="@currentCatch.CatchNumber" ReadOnly="true" Label="Catch #" Disabled="true" FullWidth="false" Outlined="false" />
        <MatTextField @bind-Value="@currentCatch.LogDate" ReadOnly="true" Disabled="true" Label="Log Date" FullWidth="false" Outlined="false" />
        <MatDatePicker @bind-Value="@currentCatch.CatchDate" EnableTime="true" Label="Catch Date and Time" Enable24hours="true" EnableSeconds="false" EnableWeekNumbers="true" FullWidth="false" Outlined="false" />
        <MatTextField @bind-Value="@currentCatch.Length" Label="Fish Length" FullWidth="false" Outlined="false" />
        <MatSelect Label="Fish Type" @bind-Value="currentCatch.Fish" FullWidth="false" Outlined="false">
            @foreach (Fish fish in fishOptions)
            {
                <MatOptionString Value="@fish.Name">@fish.Name</MatOptionString>
            }
        </MatSelect>

    </div>
    @if (HasChanged)
    {
        <MatRipple class="demo-mat-ripple" Color="@MatRippleColor.Secondary">
            <button type="submit" class="checkout-button btn btn-primary" @onclick="@OnSubmit">Save</button>
        </MatRipple>
    }
    else
    {
        <button type="submit" class="checkout-button btn btn-secondary" @onclick="@OnSubmit">Save</button>
    }
</EditForm>

@code {
    [Parameter] public Catch currentCatch { get; set; }
    [Parameter] public List<Fish> fishOptions { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public bool HasChanged { get; set; }

    private async Task SaveCatch()
    {
        var client = ClientFactory.CreateClient("server");
        HasChanged = false;
        StateHasChanged();

        HttpResponseMessage response = await client.PutAsJsonAsync("catch/" + currentCatch.Id, currentCatch);
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            HasChanged = true;
            StateHasChanged();
        }
        else
        {
            currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
            StateHasChanged();
        }
    }
}
