@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.IO
@inject IHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@inject FokkersFishing.Client.Helpers.CompetitionState competitionState

<AuthorizeView Roles="Administrator, User">
    <button type="button" class="btn btn-primary" @onclick="@((x) => AddNewCatch())">Add new catch</button>
</AuthorizeView>
<h1>Fokkers Top Catches</h1>

@if (competitionState.Active == false | ((competitionState.Active == true & competitionState.TimeTillEnd.TotalMinutes > 120) | (competitionState.Active == true & competitionState.ShowLeaderboardAfterCompetitionEnds)))
{
    if (competitionState.Active)
    {
        <h3 style="color: lightseagreen">Competition Active. Top Catches overview will be disabled 2 hours before end of competition (Competition will end in @competitionState.TimeTillEnd.Days days, @competitionState.TimeTillEnd.Hours hours, @competitionState.TimeTillEnd.Minutes minutes) </h3>
    }
    <div class="main">
        @if (bigThree == null)
        {
            <p><em>Loading Big Three...</em></p>
            <MatProgressBar Indeterminate="true"></MatProgressBar>
        }
        else
        {
            <h3>Big Three</h3>
            @foreach (BigThree big in bigThree.OrderByDescending(s => s.TotalLength))
            {
                <h4>Place # @placeCounter</h4>
                <h5>@big.Name</h5>
                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">
                        <div class="mat-layout-grid-cell">
                            @if (big.Pike != null)
                            {
                                <MatCard class="demo-mat-card">
                                    <MatCardContent>
                                        <div class="demo-mat-card-content" style="color: grey; width: 200px">
                                            <MatSubtitle2 class="demo-mat-card-clean-margin">
                                                @big.Pike.Fish (@big.Pike.Length cm)
                                            </MatSubtitle2>
                                        </div>
                                        <MatCardMedia Wide="true" ImageUrl="@big.Pike.CatchPhotoUrl">
                                        </MatCardMedia>
                                    </MatCardContent>
                                </MatCard>
                            }
                        </div>

                        <div class="mat-layout-grid-cell">
                            @if (big.Bass != null)
                            {
                                <MatCard class="demo-mat-card">
                                    <MatCardContent>
                                        <div class="demo-mat-card-content" style="color: grey; width: 200px">
                                            <MatSubtitle2 class="demo-mat-card-clean-margin">
                                                @big.Bass.Fish (@big.Bass.Length cm)
                                            </MatSubtitle2>
                                        </div>
                                        <MatCardMedia Wide="true" ImageUrl="@big.Bass.CatchPhotoUrl">
                                        </MatCardMedia>
                                    </MatCardContent>
                                </MatCard>
                            }
                        </div>

                        <div class="mat-layout-grid-cell">
                            @if (big.Zander != null)
                            {
                                <MatCard class="demo-mat-card">
                                    <MatCardContent>
                                        <div class="demo-mat-card-content" style="color: grey;width: 200px">
                                            <MatSubtitle2 class="demo-mat-card-clean-margin">
                                                @big.Zander.Fish (@big.Zander.Length cm)
                                            </MatSubtitle2>
                                        </div>
                                        <MatCardMedia Wide="true" ImageUrl="@big.Zander.CatchPhotoUrl">
                                        </MatCardMedia>
                                    </MatCardContent>
                                </MatCard>
                            }
                        </div>
                    </div>
                </div>
                <MatDivider></MatDivider>
                placeCounter++;
            }               // end foreach
        }
    </div>
    <div class="main">
        @if (fishermen == null)
        {
            <p><em>Loading Top Fishermen...</em></p>
            <MatProgressBar Indeterminate="true"></MatProgressBar>
        }
        else
        {
            <h3>Top Fishermen</h3>

            <table>
                <tr>
                    <th width="50%">Fisherman</th>
                    <th width="25%">Total Fish Length</th>
                    <th width="25%">Total Fish Caught</th>
                </tr>
                @foreach (var fisherman in fishermen)
                {
                    <tr>
                        <td>@fisherman.UserName</td>
                        <td>@fisherman.TotalLength</td>
                        <td>@fisherman.FishCount</td>
                    </tr>
                }
            </table>
        }
    </div>
}
else
{
    <h3 style="color: indianred">Competition Active. Top Catches disabled 2 hours before end of competition (time till end: @competitionState.TimeTillEnd.Days days, @competitionState.TimeTillEnd.Hours hours, @competitionState.TimeTillEnd.Minutes minutes) </h3>
}

@if (newCatch != null & EditDialogShown == true)
{
    <EditCatch OnCancel="CancelEdit" OnSave="SaveCatch"
           currentCatch="@newCatch"
           fishOptions="@fishOptions"
           dialogIsOpen="@EditDialogShown"
           users="@users"/>
}

@code {
    List<FisherMan> fishermen;
    List<BigThree> bigThree;
    List<Fish> fishOptions;
    List<User> users;

    int placeCounter = 1;
    bool EditDialogShown = false;
    bool NewCatchAdded = false;
    Catch newCatch;

    protected async override Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("serverNoAuth");
        fishOptions = await client.GetFromJsonAsync<List<Fish>>("fish");
        bigThree = await client.GetFromJsonAsync<List<BigThree>>("leaderboard/bigthree");
        fishermen = await client.GetFromJsonAsync<List<FisherMan>>("leaderboard/fishermen");
        try
        {
            var secureClient = ClientFactory.CreateClient("server");
            users = await secureClient.GetFromJsonAsync<List<User>>("adminuser/users");
        }
        catch (Exception ex)
        {
            
        }
    }

    private void CancelEdit()
    {
        EditDialogShown = false;
        StateHasChanged();
    }

    private async void AddNewCatch()
    {
        newCatch = new Catch
            {
                Length = 0,
                Fish = "Pike",
                Id = Guid.NewGuid(),
                CatchDate = DateTime.Now,
            };

        if (competitionState.Active)
        {
            newCatch.CompetitionId = competitionState.CompetitionId;
        }
        NewCatchAdded = true;
        EditDialogShown = true;
    }

    private async Task SaveCatch(Dictionary<string, IMatFileUploadEntry> catchFiles)
    {
        IMatFileUploadEntry selectedMeasureFile = catchFiles["measure"];
        IMatFileUploadEntry selectedCatchFile = catchFiles["catch"];

        var client = ClientFactory.CreateClient("server");
        HttpResponseMessage response = null;
        if (NewCatchAdded)
        {
            // Upload photos
            if (selectedMeasureFile != null)
            {
                Toaster.Add($"New Catch, Type: {newCatch.Fish}", MatToastType.Light, "Uploading measure photo", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 1500;
        config.VisibleStateDuration = 3000;
        config.HideTransitionDuration = 500;
    });
                Photo measurePhoto = new Photo { Id = newCatch.Id, PhotoType = PhotoTypeEnum.Measure };
                MemoryStream stream = new MemoryStream();
                await selectedMeasureFile.WriteToStreamAsync(stream);

                measurePhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", measurePhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    newCatch.MeasurePhotoUrl = photoResponse.PhotoUrl;
                    newCatch.MeasureThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }

            if (selectedCatchFile != null)
            {
                Toaster.Add($"New Catch, Type: {newCatch.Fish}", MatToastType.Light, "Uploading catch photo", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 1500;
        config.VisibleStateDuration = 3000;
        config.HideTransitionDuration = 500;
    });
                Photo catchPhoto = new Photo { Id = newCatch.Id, PhotoType = PhotoTypeEnum.Catch };
                MemoryStream stream = new MemoryStream();
                await selectedCatchFile.WriteToStreamAsync(stream);

                catchPhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", catchPhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    newCatch.CatchPhotoUrl = photoResponse.PhotoUrl;
                    newCatch.CatchThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }

            // Create new catch
            Toaster.Add($"New Catch, Type: {newCatch.Fish}", MatToastType.Info, "Creating catch data", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 750;
        config.VisibleStateDuration = 2000;
        config.HideTransitionDuration = 500;
    });
            response = await client.PostAsJsonAsync("catch", newCatch);
            if (response.StatusCode != System.Net.HttpStatusCode.Created)
            {
                StateHasChanged();
            }
            else
            {
                newCatch = await response.Content.ReadFromJsonAsync<Catch>();
            }

            NewCatchAdded = false;
            StateHasChanged();

        } // POST
        selectedMeasureFile = null;
        selectedCatchFile = null;
        StateHasChanged();
        Toaster.Add($"Catch #: {newCatch.CatchNumber}, Type: {newCatch.Fish}", MatToastType.Success, "Catch saved", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 750;
            config.VisibleStateDuration = 1500;
            config.HideTransitionDuration = 500;
        });
        EditDialogShown = false;
        StateHasChanged();
    }
}


