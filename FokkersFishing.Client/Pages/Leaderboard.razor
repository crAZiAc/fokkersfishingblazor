@page "/leaders"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IHttpClientFactory ClientFactory
@inject FokkersFishing.Client.Helpers.CompetitionState competitionState


<h1>Fokkers Leaderboard</h1>
@if (competitionState.Active == false | (competitionState.Active == true & competitionState.TimeTillEnd.TotalMinutes > 120)) // Competition
{
    if (competitionState.Active)
    {
        <AuthorizeView Context="authorization">
            <Authorized>
                <h3>Team Statistics</h3>
                @if (bigthree == null | currentTeam == null)
                {
                    <p><em>Loading Team Statistics...</em></p>
                    <MatProgressBar Indeterminate="true"></MatProgressBar>
                }
                else
                {
                    <MatCard class="demo-mat-card">
                        <MatCardContent>
                            <MatHeadline6 class="demo-mat-card-clean-margin">
                                @currentTeam.Name
                            </MatHeadline6>
                            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                                @foreach (User user in currentTeam.Users)
                                {
                                    @user.UserName
                                    <br />
                                }
                            </MatBody2>
                        </MatCardContent>
                    </MatCard>
                    <MatDivider></MatDivider>

                    <MatTable Items="@bigthree" class="mat-elevation-z5" Striped="true"
                  RowClass="tester"
                  PageSize="10"
                  ShowPaging="false">
                        <MatTableHeader>
                            <th width="20%">Snoek</th>
                            <th width="10%">Baars</th>
                            <th width="20%">Snoekbaars</th>

                        </MatTableHeader>
                        <MatTableRow>
                            <td>@context.Pike.Length</td>
                            <td>@context.Bass.Length</td>
                            <td>@context.Zander.Length</td>
                        </MatTableRow>
                    </MatTable>

                    <MatCard class="demo-mat-card">
                        <MatCardContent>
                            <MatHeadline6 class="demo-mat-card-clean-margin">
                                Total length: @totalLength cm
                            </MatHeadline6>
                        </MatCardContent>
                    </MatCard>
                    <MatDivider></MatDivider>
                }


                @if (scores == null)
                {
                    <p><em>Loading Team Ranking...</em></p>
                    <MatProgressBar Indeterminate="true"></MatProgressBar>
                }
                else
                {
                    <h3>Team Ranking</h3>
                    <MatTable Items="@scores.OrderBy(x => x.Ranking)" class="mat-elevation-z5" Striped="true"
                  RowClass="tester"
                  SortBy="Ranking" PageSize="25"
                  ShowPaging="false">
                        <MatTableHeader>
                            <th width="25%">Ranking</th>
                            <th width="25%">Team</th>
                            <th width="25%">Score</th>
                            <th width="25%">Total Fish Caught</th>
                        </MatTableHeader>
                        <MatTableRow>
                            <td>@context.Ranking</td>
                            <td>@context.TeamName</td>
                            <td>@context.TotalLength</td>
                            <td>@context.FishCount</td>
                        </MatTableRow>
                    </MatTable>

                }
                <div class="main">
                    @if (bigthreeIndividual == null & bigthreeBiggest == null)
                    {
                        <p><em>Loading Individual scores...</em></p>
                        <MatProgressBar Indeterminate="true"></MatProgressBar>
                    }
                    else
                    {
                        <h3>Individual Catches</h3>
                        <MatTable Items="@individualScores" class="mat-elevation-z5" Striped="true"
                      RowClass="tester"
                      PageSize="10"
                      ShowPaging="false">
                            <MatTableHeader>
                                <th width="25%">Fish</th>
                                <th width="25%">FisherMan</th>
                                <th width="25%">Length</th>
                            </MatTableHeader>
                            <MatTableRow>
                                <td>@context.Fish</td>
                                <td>@context.FisherMan</td>
                                <td>@context.Length</td>
                            </MatTableRow>
                        </MatTable>
                    }
                </div>

                <h5 style="color: lightseagreen">Competition Active. Leaderboard will be disabled 2 hours before end of competition (Competition will end in @competitionState.TimeTillEnd.Days days, @competitionState.TimeTillEnd.Hours hours, @competitionState.TimeTillEnd.Minutes minutes) </h5>
                <h5 style="color: lightblue">Team Ranking includes pending catches. The jury may correct or reject catches </h5>
            </Authorized>
            <NotAuthorized>
                <h3 style="color: indianred">Competition Active. User needs to be logged in. </h3>
            </NotAuthorized>
        </AuthorizeView>
    }
    else
    {
        <div class="main">
            @if (catches == null)
            {
                <p><em>Loading Catches Leaderboard...</em></p>
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
            else
            {

                <h3>Top Catches</h3>
                <MatTable Items="@catches" class="mat-elevation-z5" Striped="true"
              RowClass="tester"
              SortBy="Length"
              PageSize="10"
              FilterByColumnName="Fish"
              ShowPaging="true">
                    <MatTableHeader>
                        <th width="10%">Catch #</th>
                        <th width="30%">Catch Date</th>
                        <th width="10%">Fish</th>
                        <th width="20%">Fish Length</th>
                        <th width="20%">Fisherman</th>
                        <th width="20%">Status</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.GlobalCatchNumber</td>
                        <td>@context.CatchDate</td>
                        <td>@context.Fish</td>
                        <td>@context.Length</td>
                        <td>@context.UserName</td>
                        <td>
                            @if (context.CaughtInCompetition)
                            {
                    <MatFAB Icon="@MatIconNames.Fitness_center" style="color: black;background-color: lightgrey" Mini="true" />
                            }
                @switch (context.Status)
                            {
                                case CatchStatusEnum.Approved:
                                    {
                            <MatFAB Icon="@MatIconNames.Done_all" Label="Approved" style="color: lightgreen;background-color: green" />
                                        break;
                                    }
                                case CatchStatusEnum.Pending:
                                    {
                            <MatFAB Icon="@MatIconNames.Schedule" Label="Pending" style="color: lightyellow;background-color:#ffc107" />

                                        break;
                                    }
                                case CatchStatusEnum.Rejected:
                                    {
                            <MatFAB Icon="@MatIconNames.Pan_tool" Label="Rejected" style="color: darkgoldenrod;background-color:indianred" />
                                        break;
                                    }
                            }
            </td>
        </MatTableRow>
    </MatTable>
            }

            @if (fishermen == null)
            {
                <p><em>Loading Fishermen Leaderboard...</em></p>
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
            else
            {
                <h3>Top 10 Fishermen</h3>
                <MatTable Items="@fishermen" class="mat-elevation-z5" Striped="true"
              RowClass="tester"
              SortBy="TotalLength" PageSize="10"
              FilterByColumnName="UserName"
              ShowPaging="false">
                    <MatTableHeader>
                        <th width="30%">Fisherman</th>
                        <th width="30%">Total Fish Length</th>
                        <th width="30%">Total Fish Caught</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.UserName</td>
                        <td>@context.TotalLength</td>
                        <td>@context.FishCount</td>
                    </MatTableRow>
                </MatTable>

            }
        </div>
    }
}
else
{
    <h3 style="color: indianred">Competition Active. Leaderboard disabled 2 hours before end of competition (time till end: @competitionState.TimeTillEnd.Days days, @competitionState.TimeTillEnd.Hours hours, @competitionState.TimeTillEnd.Minutes minutes) </h3>
}
@code {
    Team currentTeam;
    List<BigThree> bigthree;
    BigThree bigthreeIndividual;
    BigThreeWinner bigthreeBiggest;
    List<IndividualScore> individualScores = new List<IndividualScore>();
    List<Catch> catches;
    List<TeamScore> scores;
    List<FisherMan> fishermen;
    Double totalLength;

    protected async override Task OnInitializedAsync()
    {

        if (competitionState.Active)
        {
            try
            {
                var client = ClientFactory.CreateClient("server");
                var clientOpen = ClientFactory.CreateClient("serverNoAuth");
                currentTeam = await client.GetFromJsonAsync<Team>("team/byuser");
                bigthree = await client.GetFromJsonAsync<List<BigThree>>("leaderboard/team/bigthree/" + competitionState.CompetitionId);

                foreach (BigThree countBig in bigthree)
                {
                    totalLength += countBig.TotalLength;
                }

                scores = await clientOpen.GetFromJsonAsync<List<TeamScore>>("leaderboard/open/scores/" + competitionState.CompetitionId);
                bigthreeIndividual = await client.GetFromJsonAsync<BigThree>("leaderboard/member/bigthree/" + competitionState.CompetitionId);
                bigthreeBiggest = await client.GetFromJsonAsync<BigThreeWinner>("leaderboard/biggest/bigthree/" + competitionState.CompetitionId);

                individualScores.Add(new IndividualScore
                    {
                        Fish = "Grootste snoek",
                        FisherMan = bigthreeIndividual.Pike.UserName,
                        Length = bigthreeIndividual.Pike.Length
                    });

                individualScores.Add(new IndividualScore
                    {
                        Fish = "Grootste snoekbaars",
                        FisherMan = bigthreeIndividual.Zander.UserName,
                        Length = bigthreeIndividual.Zander.Length
                    });

                individualScores.Add(new IndividualScore
                    {
                        Fish = "Grootste baars",
                        FisherMan = bigthreeIndividual.Bass.UserName,
                        Length = bigthreeIndividual.Bass.Length
                    });

                individualScores.Add(new IndividualScore
                    {
                        Fish = "Big 3",
                        FisherMan = bigthreeBiggest.Name,
                        Length = bigthreeBiggest.TotalLength
                    });

            }
            catch (Exception ex)
            {

            }
        }
        else
        {
            try
            {
                var client = ClientFactory.CreateClient("serverNoAuth");
                catches = await client.GetFromJsonAsync<List<Catch>>("leaderboard");
                fishermen = await client.GetFromJsonAsync<List<FisherMan>>("leaderboard/fishermen");
            }
            catch (Exception ex)
            {

            }
        }
    }
}


