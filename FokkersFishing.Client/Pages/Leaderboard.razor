@page "/leaders"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IHttpClientFactory ClientFactory
@inject FokkersFishing.Client.Helpers.CompetitionState competitionState


<h1>Fokkers Leaderboard</h1>
@if (competitionState.Active)
{
    <AuthorizeView Context="authorization">
        <Authorized>
            <h3>Team Statistics</h3>
            @if (bigthree == null | currentTeam == null)
            {
                <p><em>Loading Team Statistics...</em></p>
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
            else
            {
                <MatCard class="demo-mat-card">
                    <MatCardContent>
                        <MatHeadline6 class="demo-mat-card-clean-margin">
                            @currentTeam.Name
                        </MatHeadline6>
                        <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                            @foreach (User user in currentTeam.Users)
                            {
                                @user.UserName
                                <br />
                            }
                        </MatBody2>
                    </MatCardContent>
                </MatCard>
                <MatDivider></MatDivider>

                <MatTable Items="@bigthree" class="mat-elevation-z5" Striped="true"
                          RowClass="tester"
                          PageSize="10"
                          ShowPaging="false">
                    <MatTableHeader>
                        <th width="20%">Snoek</th>
                        <th width="10%">Baars</th>
                        <th width="20%">Snoekbaars</th>

                    </MatTableHeader>
                    <MatTableRow>
                        @if (context.Pike.Status == CatchStatusEnum.Pending)
                        {
                            <td style="color: black;background-color: #ffc107">
                                @context.Pike.Length
                            </td>
                        }
                        else
                        {
                            <td style="color: black;background-color: green">
                                @context.Pike.Length
                            </td>
                        }

                        @if (context.Bass.Status == CatchStatusEnum.Pending)
                        {
                            <td style="color: black;background-color: #ffc107">
                                @context.Bass.Length
                            </td>
                        }
                        else
                        {
                            <td style="color: black;background-color: green">
                                @context.Bass.Length
                            </td>
                        }

                        @if (context.Zander.Status == CatchStatusEnum.Pending)
                        {
                            <td style="color: black;background-color: #ffc107">
                                @context.Zander.Length
                            </td>
                        }
                        else
                        {
                            <td style="color: black;background-color: green">
                                @context.Zander.Length
                            </td>
                        }

                    </MatTableRow>
                </MatTable>

                <MatCard class="demo-mat-card">
                    <MatCardContent>
                        <MatHeadline6 class="demo-mat-card-clean-margin">
                            Total length: @totalLength cm
                        </MatHeadline6>
                    </MatCardContent>
                </MatCard>
                <MatDivider></MatDivider>
            }


            @if (competitionState.CompetitionEnded && scores == null)
            {
                <p><em>Loading Team Ranking...</em></p>
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
            else if (scores != null & competitionState.CompetitionEnded)
            {
                <h3>Team Ranking</h3>
                <MatTable Items="@scores.OrderBy(x => x.Rank)" class="mat-elevation-z5" Striped="true"
                          RowClass="tester"
                          SortBy="Ranking" PageSize="25"
                          ShowPaging="false">
                    <MatTableHeader>
                        <th width="25%">Ranking</th>
                        <th width="25%">Team</th>
                        <th width="25%">Score</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.Rank</td>
                        <td>@context.TeamName</td>
                        <td>@context.Score</td>
                    </MatTableRow>
                </MatTable>

            }

            <div class="main">
                @if (userScores == null)
                {
                    <p><em>Loading Individual Catches...</em></p>
                    <MatProgressBar Indeterminate="true"></MatProgressBar>
                }
                else
                {
                    <h3>Individual Catches</h3>
                    <MatTable Items="@userScores" class="mat-elevation-z5" Striped="true"
                              RowClass="tester"
                              SortBy="Length" PageSize="10"
                              ShowPaging="true">
                        <MatTableHeader>
                            <th width="25%">Fisherman</th>
                            <th width="25%">Fish Length</th>
                        </MatTableHeader>
                        <MatTableRow>
                            <td>@context.FisherMan</td>
                            <td>@context.Length</td>
                        </MatTableRow>
                    </MatTable>

                }
            </div>


            <div class="main">
                @if (bigthreeIndividual == null & bigthreeBiggest == null)
                {
                    <p><em>Loading Individual Big Three...</em></p>
                    <MatProgressBar Indeterminate="true"></MatProgressBar>
                }
                else
                {
                    <h3>Individual Big Three</h3>
                    <MatTable Items="@individualScores" class="mat-elevation-z5" Striped="true"
                              RowClass="tester"
                              PageSize="10"
                              ShowPaging="false">
                        <MatTableHeader>
                            <th width="25%">Fish</th>
                            <th width="25%">Fisherman</th>
                            <th width="25%">Length</th>
                            <th width="25%">Status</th>
                        </MatTableHeader>
                        <MatTableRow>
                            <td>@context.Fish</td>
                            <td>@context.FisherMan</td>
                            <td>@context.Length</td>
                            <td>
                                @switch (context.Status)
                                {
                                    case CatchStatusEnum.Approved:
                                        {
                                            <MatFAB Icon="@MatIconNames.Done_all" Label="A" style="color: lightgreen;background-color: green" />
                                            break;
                                        }
                                    case CatchStatusEnum.Pending:
                                        {
                                            <MatFAB Icon="@MatIconNames.Schedule" Label="P" style="color: lightyellow;background-color:#ffc107" />

                                            break;
                                        }
                                    case CatchStatusEnum.Rejected:
                                        {
                                            <MatFAB Icon="@MatIconNames.Pan_tool" Label="R" style="color: darkgoldenrod;background-color:indianred" />
                                            break;
                                        }
                                }
                            </td>
                        </MatTableRow>
                    </MatTable>
                }
            </div>


            @if (competitionState.CompetitionEnded)
            {
                <h5 style="color: lightseagreen">Competition Ended.</h5>
            }
            else if (competitionState.CompetitionStarted)
            {
                <h5 style="color: lightseagreen">Competition has not started</h5>
                <h6 style="color: gray">Starts in <span style="color:lightcoral">@competitionState.TimeTillStarted.Days</span> days, <span style="color:lightcoral">@competitionState.TimeTillStarted.Hours</span> hours, <span style="color:lightcoral">@competitionState.TimeTillStarted.Minutes</span> minutes</h6>
            }
            else
            {
                <h5 style="color: yellowgreen">Competition Active. Top Catches overview will be disabled during competition</h5>
                <h6 style="color: gray">Ends in <span style="color:lightcoral">@competitionState.TimeTillEnd.Days</span> days, <span style="color:lightcoral">@competitionState.TimeTillEnd.Hours</span> hours, <span style="color:lightcoral">@competitionState.TimeTillEnd.Minutes</span> minutes</h6>
            }
            <h5 style="color: lightblue">Team Ranking includes pending catches. The jury may correct or reject catches </h5>
        </Authorized>
        <NotAuthorized>
            <h3 style="color: indianred">Competition Active. User needs to be logged in. </h3>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <div class="main">
        @if (catches == null)
        {
            <p><em>Loading Catches Leaderboard...</em></p>
            <MatProgressBar Indeterminate="true"></MatProgressBar>
        }
        else
        {

            <h3>Top Catches</h3>
            <MatTable Items="@catches" class="mat-elevation-z5" Striped="true"
                      RowClass="tester"
                      SortBy="Length"
                      PageSize="10"
                      FilterByColumnName="Fish"
                      ShowPaging="true">
                <MatTableHeader>
                    <th width="10%">Catch #</th>
                    <th width="30%">Catch Date</th>
                    <th width="10%">Fish</th>
                    <th width="20%">Fish Length</th>
                    <th width="20%">Fisherman</th>
                    <th width="20%">Status</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.GlobalCatchNumber</td>
                    <td>@context.CatchDate</td>
                    <td>@context.Fish</td>
                    <td>@context.Length</td>
                    <td>@context.UserName</td>
                    <td>
                        @if (context.CaughtInCompetition)
                        {
                            <MatFAB Icon="@MatIconNames.Fitness_center" style="color: black;background-color: lightgrey" Mini="true" />
                        }
                        @switch (context.Status)
                        {
                            case CatchStatusEnum.Approved:
                                {
                                    <MatFAB Icon="@MatIconNames.Done_all" Label="Approved" style="color: lightgreen;background-color: green" />
                                    break;
                                }
                            case CatchStatusEnum.Pending:
                                {
                                    <MatFAB Icon="@MatIconNames.Schedule" Label="Pending" style="color: lightyellow;background-color:#ffc107" />

                                    break;
                                }
                            case CatchStatusEnum.Rejected:
                                {
                                    <MatFAB Icon="@MatIconNames.Pan_tool" Label="Rejected" style="color: darkgoldenrod;background-color:indianred" />
                                    break;
                                }
                        }
                    </td>
                </MatTableRow>
            </MatTable>
        }

        @if (fishermen == null)
        {
            <p><em>Loading Fishermen Leaderboard...</em></p>
            <MatProgressBar Indeterminate="true"></MatProgressBar>
        }
        else
        {
            <h3>Top 10 Fishermen</h3>
            <MatTable Items="@fishermen" class="mat-elevation-z5" Striped="true"
                      RowClass="tester"
                      SortBy="TotalLength" PageSize="10"
                      FilterByColumnName="UserName"
                      ShowPaging="false">
                <MatTableHeader>
                    <th width="30%">Fisherman</th>
                    <th width="30%">Total Fish Length</th>
                    <th width="30%">Total Fish Caught</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.UserName</td>
                    <td>@context.TotalLength</td>
                    <td>@context.FishCount</td>
                </MatTableRow>
            </MatTable>

        }
    </div>
}

@code {
    Team currentTeam;
    List<BigThree> bigthree;
    BigThree bigthreeIndividual;
    BigThreeWinner bigthreeBiggest;
    List<IndividualScore> individualScores = new List<IndividualScore>();
    List<Catch> catches;
    IEnumerable<IndividualScore> userScores;
    List<Ranking> scores;
    List<FisherMan> fishermen;
    Double totalLength;

    protected async override Task OnInitializedAsync()
    {

        if (competitionState.Active)
        {
            try
            {
                var client = ClientFactory.CreateClient("server");
                var clientOpen = ClientFactory.CreateClient("serverNoAuth");
                currentTeam = await client.GetFromJsonAsync<Team>("team/byuser");
                bigthree = await client.GetFromJsonAsync<List<BigThree>>("leaderboard/team/bigthree/" + competitionState.CompetitionId);

                foreach (BigThree countBig in bigthree)
                {
                    totalLength += countBig.TotalLength;
                }

                bigthreeIndividual = await client.GetFromJsonAsync<BigThree>("leaderboard/user/bigthree/" + competitionState.CompetitionId);

                if (competitionState.CompetitionEnded)
                {
                    scores = await client.GetFromJsonAsync<List<Ranking>>("leaderboard/team/bigthree/all/" + competitionState.CompetitionId);
                    bigthreeBiggest = await client.GetFromJsonAsync<BigThreeWinner>("leaderboard/biggest/bigthree/" + competitionState.CompetitionId);
                }
                else
                {
                    bigthreeBiggest = new BigThreeWinner();
                }

                individualScores.Add(new IndividualScore
                    {
                        Fish = "Grootste snoek",
                        Status = bigthreeIndividual.Pike.Status,
                        FisherMan = bigthreeIndividual.Pike.UserName,
                        Length = bigthreeIndividual.Pike.Length
                    });

                individualScores.Add(new IndividualScore
                    {
                        Fish = "Grootste snoekbaars",
                        Status = bigthreeIndividual.Zander.Status,
                        FisherMan = bigthreeIndividual.Zander.UserName,
                        Length = bigthreeIndividual.Zander.Length
                    });

                individualScores.Add(new IndividualScore
                    {
                        Fish = "Grootste baars",
                        Status = bigthreeIndividual.Bass.Status,
                        FisherMan = bigthreeIndividual.Bass.UserName,
                        Length = bigthreeIndividual.Bass.Length
                    });

                if (competitionState.CompetitionEnded)
                {
                    individualScores.Add(new IndividualScore
                        {
                            Fish = "Big 3",
                            FisherMan = bigthreeBiggest.Name,
                            Length = bigthreeBiggest.TotalLength
                        });
                }

                var teamCatches = await client.GetFromJsonAsync<List<Catch>>("leaderboard/team/" + competitionState.CompetitionId);
                var sumScores = (from uc in teamCatches
                                 group uc by uc.UserName into fishGroup
                                 select new IndividualScore
                                     {
                                         Length = fishGroup.Sum(x => x.Length),
                                         FisherMan = fishGroup.Key
                                     });
                userScores = sumScores.ToList().OrderByDescending(x => x.Length);

            }
            catch (Exception ex)
            {

            }
        }
        else
        {
            try
            {
                var client = ClientFactory.CreateClient("serverNoAuth");
                catches = await client.GetFromJsonAsync<List<Catch>>("leaderboard");
                fishermen = await client.GetFromJsonAsync<List<FisherMan>>("leaderboard/fishermen");
            }
            catch (Exception ex)
            {

            }
        }
    }
}


