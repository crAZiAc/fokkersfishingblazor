@page "/catches"
@inject IHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@inject FokkersFishing.Client.Helpers.CompetitionState competitionState
@using System.ComponentModel
@using System.IO
@attribute [Authorize(Roles = "Administrator, User")]

<div class="main">
    @if (catches == null & currentCatch == null)
    {
        <p><em>Loading catches for user...</em></p>
        <MatProgressBar Indeterminate="true"></MatProgressBar>
        <label>@exceptionMessage</label>
    }
    else
    {
        @if (competitionState.Active)
        {
            <h4> Only showing catches in competition</h4>
        }
        @if (!competitionState.CompetitionEnded & !competitionState.CompetitionStarted)
        {
            <button type="button" class="btn btn-primary" @onclick="@((x) => AddNewCatch())">Add new catch</button>
        }
        <MatTable Items="@catches" class="mat-elevation-z5" Striped="true"
                  RowClass="tester"
                  SortBy="Length"
                  PageSize="25"
                  FilterByColumnName="Fish"
                  ShowPaging="true">
            <MatTableHeader>
                <th width="10%">Catch #</th>
                <th width="30%">Catch Date</th>
                <th width="10%">Fish</th>
                <th width="20%">Fish Length</th>
                <th width="20%">Fisherman</th>
                <th width="20%">Catch</th>
                <th width="20%">Measure</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.GlobalCatchNumber</td>
                <td>@context.CatchDate</td>
                <td>@context.Fish</td>
                <td>@context.Length</td>
                <td>@context.UserName</td>
                <td>
                    <img src="@context.CatchThumbnailUrl" style=" max-width: 100%;height: auto;" @onclick="@(() => PhotoViewerShowCatch(context))" />
                </td>
                <td>
                    <img src="@context.MeasureThumbnailUrl" style=" max-width: 100%;height: auto;" @onclick="@(() => PhotoViewerShowMeasure(context))" />
                </td>
                <td>
                    @if (context.CaughtInCompetition)
                    {
                        <MatFAB Icon="@MatIconNames.Fitness_center" style="color: black;background-color: lightgrey" Mini="true" />
                    }
                    @switch (context.Status)
                    {
                        case CatchStatusEnum.Approved:
                            {
                                <MatFAB Icon="@MatIconNames.Done_all" Label="Approved" style="color: lightgreen;background-color: green" />
                                @* <MatIconButton Icon="@MatIconNames.Edit" @onclick="@(() => ShowEditDialog(context.Id))"></MatIconButton> *@
                                <MatIconButton Icon="@MatIconNames.Delete" @onclick="@(() => ShowDeleteDialog(context.Id))"></MatIconButton>
                                break;
                            }
                        case CatchStatusEnum.Pending:
                            {
                                <MatFAB Icon="@MatIconNames.Schedule" Label="Pending" style="color: lightyellow;background-color:#ffc107" />
                                <MatIconButton Icon="@MatIconNames.Edit" @onclick="@(() => ShowEditDialog(context.Id))"></MatIconButton>
                                <MatIconButton Icon="@MatIconNames.Delete" @onclick="@(() => ShowDeleteDialog(context.Id))"></MatIconButton>

                                break;
                            }
                        case CatchStatusEnum.Rejected:
                            {
                                <MatFAB Icon="@MatIconNames.Pan_tool" Label="Rejected" style="color: darkgoldenrod;background-color:indianred" />
                                break;
                            }
                    }
                </td>
            </MatTableRow>
        </MatTable>

        @*   @foreach (Catch catchRow in catches.OrderByDescending(c => c.CatchNumber))
    {
    string image = string.Empty;
    string textColor = string.Empty;
    if (catchRow.CatchPhotoUrl != null)
    {
    image = catchRow.CatchPhotoUrl;
    textColor = "grey";
    }
    else
    {
    image = "https://fokkersfishingstorage.blob.core.windows.net/catches/NoCatch.png";
    textColor = "red";
    }

    string imageMeasure = string.Empty;
    if (catchRow.MeasurePhotoUrl != null)
    {
    imageMeasure = catchRow.MeasurePhotoUrl;
    textColor = "grey";
    }
    else
    {
    imageMeasure = "https://fokkersfishingstorage.blob.core.windows.net/catches/NoCatch.png";
    textColor = "red";
    }

    <MatCard class="demo-mat-card" >
    <MatCardContent >
    <div class="demo-mat-card-content" style="color: @textColor;">
    <MatHeadline6 class="demo-mat-card-clean-margin">
    Catch # @catchRow.CatchNumber (@catchRow.Fish - @catchRow.Length cm)
    </MatHeadline6>
    <MatSubtitle2 class="demo-mat-card-clean-margin">
    Catch date: @catchRow.CatchDate.ToLocalTime()
    <br />
    Global Catch # @catchRow.GlobalCatchNumber
    </MatSubtitle2>
    <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
    Logged: @catchRow.LogDate.ToLocalTime()
    <br />
    Edited: @catchRow.EditDate.ToLocalTime()
    </MatBody2>
    </div>
    <MatCardActions>
    <MatCardActionIcons>
    @if (catchRow.CaughtInCompetition)
    {
    <MatFAB Icon="@MatIconNames.Fitness_center" style="color: black;background-color: lightgrey" Mini="true"/>
    }
    @switch (catchRow.Status)
    {
    case CatchStatusEnum.Approved:
    {
    <MatFAB Icon="@MatIconNames.Done_all" Label="Approved" style="color: lightgreen;background-color: green" Mini="true" />
    <MatIconButton Icon="@MatIconNames.Delete" @onclick="@(() => ShowDeleteDialog(catchRow.Id))"></MatIconButton>
    break;
    }
    case CatchStatusEnum.Pending:
    {
    <MatFAB Icon="@MatIconNames.Schedule" Label="Pending" style="color: lightyellow;background-color:#ffc107" Mini="true" />
    <MatIconButton Icon="@MatIconNames.Edit" @onclick="@(() => ShowEditDialog(catchRow.Id))"></MatIconButton>
    <MatIconButton Icon="@MatIconNames.Delete" @onclick="@(() => ShowDeleteDialog(catchRow.Id))"></MatIconButton>

    break;
    }
    case CatchStatusEnum.Rejected:
    {
    <MatFAB Icon="@MatIconNames.Pan_tool" Label="Rejected" style="color: darkgoldenrod;background-color:indianred"  Mini="true"/>
    break;
    }
    }
    </MatCardActionIcons>
    </MatCardActions>
    </MatCardContent>
    </MatCard>
    <MatTabGroup>
    <MatTab Label="Catch">
    <img src="@image" style=" max-width: 100%;height: auto;">
    </MatTab>
    <MatTab Label="Measure">
    <img src="@imageMeasure" style=" max-width: 100%;height: auto;">
    </MatTab>
    </MatTabGroup>
    <br />
    } *@
    }
</div>

@if (currentCatch != null & EditDialogShown == true)
{
    <EditCatch OnCancel="CancelEdit" OnSave="SaveCatch"
               currentCatch="@currentCatch"
               fishOptions="@fishOptions"
               dialogIsOpen="@EditDialogShown"
               adminEdit="false"
               users="@users" />
}

@if (currentCatch != null & DeleteDialogShown == true)
{
    <ConfirmCatchDelete OnCancel="CancelDelete" OnConfirm="@(() => DeleteCatch(currentCatch.Id))" catchMade="@currentCatch" dialogIsOpen="@DeleteDialogShown" />
}

@if (selectedPhotoCatch != null & PhotoViewerCatchShown == true)
{
    <PhotoViewer OnClose="@(() => PhotoViewerCatchClose())" catchMade="@selectedPhotoCatch" dialogIsOpen="@PhotoViewerCatchShown" url="@selectedPhotoCatch.CatchPhotoUrl" />
}

@if (selectedMeasureCatch != null & PhotoViewerMeasureShown == true)
{
    <PhotoViewer OnClose="@(() => PhotoViewerMeasureClose())" catchMade="@selectedMeasureCatch" dialogIsOpen="@PhotoViewerMeasureShown" url="@selectedMeasureCatch.MeasurePhotoUrl" />
}

@code {
    List<Catch> catches;
    List<Fish> fishOptions;
    List<User> users;

    public Catch currentCatch;
    bool EditDialogShown = false;
    bool DeleteDialogShown = false;
    bool PhotoViewerCatchShown = false;
    bool PhotoViewerMeasureShown = false;
    Catch selectedPhotoCatch;
    Catch selectedMeasureCatch;
    public IMatFileUploadEntry selectedMeasureFile;
    public IMatFileUploadEntry selectedCatchFile;
    public bool NewCatchAdded = false;
    public string exceptionMessage;

    protected async override Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("server");
        try
        {
            fishOptions = await client.GetFromJsonAsync<List<Fish>>("fish");
            users = await client.GetFromJsonAsync<List<User>>("adminuser/users");
            if (competitionState.Active == false)
            {
                catches = await client.GetFromJsonAsync<List<Catch>>("catch");
            }
            else
            {
                catches = await client.GetFromJsonAsync<List<Catch>>("catch/competition/" + competitionState.CompetitionId);
            }

            if (catches.Count > 0)
            {
                currentCatch = catches.FirstOrDefault();
            }
            else
            {
                currentCatch = new Catch();
            }
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
            StateHasChanged();
        }
    }

    private async void AddNewCatch()
    {
        Catch newCatch = new Catch
            {
                Length = 0,
                Id = Guid.NewGuid(),
                Fish = "Pike",
                CatchDate = DateTime.Now,
                Status = CatchStatusEnum.Pending
            };

        if (competitionState.Active)
        {
            newCatch.CompetitionId = competitionState.CompetitionId;
        }

        NewCatchAdded = true;
        currentCatch = newCatch;
        EditDialogShown = true;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        EditDialogShown = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        DeleteDialogShown = false;
        StateHasChanged();
    }

    private void ShowEditDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        EditDialogShown = true;
        StateHasChanged();
    }

    private void ShowDeleteDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        DeleteDialogShown = true;
        StateHasChanged();
    }

    private void DeleteCatch(Guid id)
    {
        var client = ClientFactory.CreateClient("server");
        client.DeleteAsync("catch/" + id);
        Catch catchToBeDeleted = catches.FirstOrDefault(e => e.Id == id);
        catches.Remove(catchToBeDeleted);
        DeleteDialogShown = false;

        // Delete photos
        client.DeleteAsync($"photo/{id}");
        StateHasChanged();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            currentCatch = catches.FirstOrDefault();
        }
        else
        {
            currentCatch = ((Catch)row);
        }

        this.StateHasChanged();
    }

    public void PhotoViewerShowCatch(Catch catchSelected)
    {
        selectedPhotoCatch = catchSelected;
        PhotoViewerCatchShown = true;
        StateHasChanged();
    }

    public void PhotoViewerShowMeasure(Catch catchSelected)
    {
        selectedMeasureCatch = catchSelected;
        PhotoViewerMeasureShown = true;
        StateHasChanged();
    }

    public void PhotoViewerCatchClose()
    {
        PhotoViewerCatchShown = false;
        StateHasChanged();
    }

    public void PhotoViewerMeasureClose()
    {
        PhotoViewerMeasureShown = false;
        StateHasChanged();
    }

    private async Task SaveCatch(Dictionary<string, IMatFileUploadEntry> catchFiles)
    {
        IMatFileUploadEntry selectedMeasureFile = catchFiles["measure"];
        IMatFileUploadEntry selectedCatchFile = catchFiles["catch"];

        var client = ClientFactory.CreateClient("server");
        HttpResponseMessage response = null;
        if (NewCatchAdded)
        {
            // Upload photos
            if (selectedMeasureFile != null)
            {
                Toaster.Add($"New Catch, Type: {currentCatch.Fish}", MatToastType.Light, "Uploading measure photo", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 1500;
        config.VisibleStateDuration = 3000;
        config.HideTransitionDuration = 500;
    });
                Photo measurePhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Measure };
                MemoryStream stream = new MemoryStream();
                await selectedMeasureFile.WriteToStreamAsync(stream);

                measurePhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", measurePhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    currentCatch.MeasurePhotoUrl = photoResponse.PhotoUrl;
                    currentCatch.MeasureThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }

            if (selectedCatchFile != null)
            {
                Toaster.Add($"New Catch, Type: {currentCatch.Fish}", MatToastType.Light, "Uploading catch photo", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 1500;
        config.VisibleStateDuration = 3000;
        config.HideTransitionDuration = 500;
    });
                Photo catchPhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Catch };
                MemoryStream stream = new MemoryStream();
                await selectedCatchFile.WriteToStreamAsync(stream);

                catchPhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", catchPhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    currentCatch.CatchPhotoUrl = photoResponse.PhotoUrl;
                    currentCatch.CatchThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }

            // Create new catch
            Toaster.Add($"New Catch, Type: {currentCatch.Fish}", MatToastType.Info, "Creating catch data", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 750;
        config.VisibleStateDuration = 2000;
        config.HideTransitionDuration = 500;
    });
            response = await client.PostAsJsonAsync("catch", currentCatch);
            if (response.StatusCode != System.Net.HttpStatusCode.Created)
            {
                StateHasChanged();
            }
            else
            {
                currentCatch = await response.Content.ReadFromJsonAsync<Catch>();

                if (currentCatch.UserEmail == currentCatch.RegisterUserEmail)
                {
                    catches.Add(currentCatch);
                }
            }

            NewCatchAdded = false;
            StateHasChanged();

        } // POST
        else
        {
            Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Info, "Saving catch", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 2000;
            config.VisibleStateDuration = 5000;
            config.HideTransitionDuration = 500;
        });
            StateHasChanged();
            // Upload photos
            if (selectedMeasureFile != null)
            {
                Photo measurePhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Measure };
                MemoryStream stream = new MemoryStream();
                await selectedMeasureFile.WriteToStreamAsync(stream);

                measurePhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", measurePhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    currentCatch.MeasurePhotoUrl = photoResponse.PhotoUrl;
                    currentCatch.MeasureThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }

            if (selectedCatchFile != null)
            {
                Photo catchPhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Catch };
                MemoryStream stream = new MemoryStream();
                await selectedCatchFile.WriteToStreamAsync(stream);

                catchPhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", catchPhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    currentCatch.CatchPhotoUrl = photoResponse.PhotoUrl;
                    currentCatch.CatchThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }

            response = await client.PutAsJsonAsync("catch/" + currentCatch.Id, currentCatch);
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Warning, "Saving catch failed", "", config =>
                {
                    config.ShowCloseButton = true;
                    config.ShowProgressBar = true;
                    config.MaximumOpacity = 100;

                    config.ShowTransitionDuration = 1000;
                    config.VisibleStateDuration = 2000;
                    config.HideTransitionDuration = 500;
                });
                StateHasChanged();
            }
            else
            {
                currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
                StateHasChanged();
            }
        } // PUT


        selectedMeasureFile = null;
        selectedCatchFile = null;
        StateHasChanged();
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Success, "Catch saved", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 750;
            config.VisibleStateDuration = 1500;
            config.HideTransitionDuration = 500;
        });
        EditDialogShown = false;
        StateHasChanged();
    }


}