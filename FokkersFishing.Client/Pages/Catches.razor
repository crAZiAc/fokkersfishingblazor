@page "/catches"
@inject IHttpClientFactory ClientFactory
@inject HttpClient HttpClient
@using System.ComponentModel

<div class="main">

    @if (catches == null & currentCatch == null)
    {
        <p><em>Loading catches for user...</em></p>
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        <button type="button" class="btn btn-primary" @onclick="@((x) => AddNewCatch())">Add new catch</button>
        <MatTable Items="@catches" class="mat-elevation-z5"
                  Striped="true" RowClass="tester"
                  SortBy="CatchNumber"
                  PageSize="10"
                  AllowSelection="true"
                  SelectionChanged="SelectionChangedEvent"
                  FilterByColumnName="Fish">
            <MatTableHeader>
                <th width="10%">Catch #</th>
                <th width="10%">Global Catch #</th>
                <th width="30%">Catch Date</th>
                <th width="10%">Fish</th>
                <th width="20%">Fish Length</th>
                <th width="10%">Commands</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.CatchNumber</td>
                <td>@context.GlobalCatchNumber</td>
                <td>@context.CatchDate</td>
                <td>@context.Fish</td>
                <td>@context.Length</td>
                <td>
                    <button class="btn btn-warning" @onclick="@(() => ShowDeleteDialog(context.Id))">Delete</button>
                </td>
            </MatTableRow>
        </MatTable>
        <EditCatch currentCatch="@currentCatch" fishOptions="@fishOptions" OnSubmit="@CatchSaved" HasChanged="true" />
    }
</div>

<TemplatedDialog Show="@DeleteDialogShown">
    <ConfirmDelete OnCancel="CancelDelete" OnConfirm="@(() => DeleteCatch(currentCatch.Id))" catchMade="@currentCatch" dialogIsOpen="@DeleteDialogShown" />
</TemplatedDialog>

@code {
    List<Catch> catches;
    List<Fish> fishOptions;
    public Catch currentCatch;
    bool DeleteDialogShown = false;


    protected async override Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("server");
        fishOptions = await client.GetFromJsonAsync<List<Fish>>("fish");
        catches = await client.GetFromJsonAsync<List<Catch>>("catch");
        if (catches.Count > 0)
        {
            currentCatch = catches.FirstOrDefault();
        }
        else
        {
            currentCatch = new Catch();
        }

    }

    private async void AddNewCatch()
    {
        Catch newCatch = new Catch
        {
            Length = 0,
            Fish = "Pike",
            CatchDate = DateTime.Now,
        };

        var client = ClientFactory.CreateClient("server");
        HttpResponseMessage response = await client.PostAsJsonAsync("catch", newCatch);
        if (response.StatusCode != System.Net.HttpStatusCode.Created)
        {
            StateHasChanged();
        }
        else
        {
            newCatch = await response.Content.ReadFromJsonAsync<Catch>();
            catches.Add(newCatch);
            currentCatch = newCatch;
            StateHasChanged();
        }
    }


    private void CatchSaved()
    {
        StateHasChanged();
    }

    private void CancelDelete()
    {
        DeleteDialogShown = false;
    }

    private void ShowDeleteDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        DeleteDialogShown = true;
    }

    private void DeleteCatch(Guid id)
    {
        var client = ClientFactory.CreateClient("server");
        client.DeleteAsync("catch/" + id);
        Catch catchToBeDeleted = catches.FirstOrDefault(e => e.Id == id);
        catches.Remove(catchToBeDeleted);
        DeleteDialogShown = false;
        StateHasChanged();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            currentCatch = null;
        }
        else
        {
            currentCatch = ((Catch)row);
        }

        this.StateHasChanged();
    }
} 