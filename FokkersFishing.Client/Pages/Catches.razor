@page "/catches"
@inject HttpClient HttpClient
@using System.ComponentModel


<div class="main">

    @if (catches == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <button type="button" class="btn btn-primary" @onclick="@((x) => AddNewCatch())">Add</button>
        <MatTable Items="@catches" class="mat-elevation-z5" Striped="true" RowClass="tester" SortBy="CatchNumber" PageSize="10">
            <MatTableHeader>
                <th width="10%">Catch #</th>
                <th width="10%">Global Catch #</th>
                <th width="10%">Catch Date</th>
                <th width="10%">Fish</th>
                <th width="10%">Fish Length</th>
                <th width="10%">Log Date</th>
                <th width="10%">Commands</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.CatchNumber</td>
                <td>@context.GlobalCatchNumber</td>
                <td>@context.CatchDate</td>
                <td>@context.Fish</td>
                <td>@context.Length</td>
                <td>@context.LogDate</td>
                <td>
                    <button class="btn btn-primary" @onclick="@(() => EditCatch(context.Id))">Edit</button>
                    <button class="btn btn-warning" @onclick="@(() => DeleteCatch(context.Id))">Delete</button>
                </td>
            </MatTableRow>
        </MatTable>
        <EditCatch currentCatch="@currentCatch" fishOptions="@fishOptions" OnSubmit="@CatchSaved" />
    }
</div>

@code {
    List<Catch> catches;
    public Catch currentCatch;

    // TODO: get from db
    List<Fish> fishOptions = new List<Fish>
{
        new Fish() { Name = "Pike"},
        new Fish() { Name = "Zander"},
        new Fish() { Name = "Bass"}
    };

    protected async override Task OnInitializedAsync()
    {
        catches = await HttpClient.GetJsonAsync<List<Catch>>("catch");
        if (catches.Count > 0)
        {
            currentCatch = catches.FirstOrDefault();
            EditCatch(currentCatch.Id);
        }
        else
        {
            currentCatch = new Catch();
        }
    }

    private async void AddNewCatch()
    {
        Catch newCatch = new Catch
        {
            Length = 0,
            Fish = "Pike",
            CatchDate = DateTime.Now
        };

        newCatch = await HttpClient.PostJsonAsync<Catch>("catch", newCatch);
        catches.Add(newCatch);
        currentCatch = newCatch;
        StateHasChanged();
    }

    private void EditCatch(Guid id)
    {
        currentCatch = catches.FirstOrDefault(x => x.Id == id);
        StateHasChanged();
    }

    private void CatchSaved()
    {
        StateHasChanged();
    }

    private void DeleteCatch(Guid id)
    {
        HttpClient.DeleteAsync("catch/" + id);
        Catch catchToBeDeleted = catches.FirstOrDefault(e => e.Id == id);
        catches.Remove(catchToBeDeleted);
        StateHasChanged();
    }
}