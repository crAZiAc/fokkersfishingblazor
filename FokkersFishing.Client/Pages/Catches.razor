@page "/catches"
@inject IHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@using System.ComponentModel
@using System.IO

<div class="main">

    @if (catches == null & currentCatch == null)
    {
        <p><em>Loading catches for user...</em></p>
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        <button type="button" class="btn btn-primary" @onclick="@((x) => AddNewCatch())">Add new catch</button>
        <MatTable Items="@catches" class="mat-elevation-z5"
                  Striped="true" RowClass="tester"
                  SortBy="CatchNumber"
                  PageSize="10"
                  AllowSelection="true"
                  SelectionChanged="SelectionChangedEvent"
                  FilterByColumnName="Fish">
            <MatTableHeader>
                <th width="10%">Catch #</th>
                <th width="10%">Global Catch #</th>
                <th width="30%">Catch Date</th>
                <th width="10%">Fish</th>
                <th width="20%">Fish Length</th>
                <th width="20%">Photos</th>
                <th width="10%">Commands</th>
            </MatTableHeader>
            <MatTableRow>
                <td><button class="btn btn-primary" @onclick="@(() => ShowEditDialog(context.Id))">@context.CatchNumber</button></td>
                <td>@context.GlobalCatchNumber</td>
                <td>@context.CatchDate</td>
                <td>@context.Fish</td>
                <td>@context.Length</td>
                <td>
                    <table>
                        <tr>
                            <td width="50%">
                                @if (context.MeasureThumbnailUrl != null)
                                    {
                                    <img src="@context.MeasureThumbnailUrl" title="Measure" @onclick="@(() => PhotoViewerShowMeasure(context))" />
                                    }
                            </td>
                            <td width="50%">
                                @if (context.CatchThumbnailUrl != null)
                                    {
                                    <img src="@context.CatchThumbnailUrl" title="Catch" @onclick="@(() => PhotoViewerShowCatch(context))" />
                                    }
                            </td>
                        </tr>
                    </table>
                </td>
                <td>
                    
                    <button class="btn btn-warning" @onclick="@(() => ShowDeleteDialog(context.Id))">Delete</button>
                </td>
            </MatTableRow>
        </MatTable>
    }
</div>

@if (currentCatch != null & EditDialogShown == true)
{
            <EditCatch OnCancel="CancelEdit" OnSave="SaveCatch"
                       currentCatch="@currentCatch"
                       fishOptions="@fishOptions"
                       dialogIsOpen="@EditDialogShown" />
}

@if (currentCatch != null & DeleteDialogShown == true)
{
    <ConfirmDelete OnCancel="CancelDelete" OnConfirm="@(() => DeleteCatch(currentCatch.Id))" catchMade="@currentCatch" dialogIsOpen="@DeleteDialogShown" />
}

@if (selectedPhotoCatch != null & PhotoViewerCatchShown == true)
{
    <PhotoViewer OnClose="@(() => PhotoViewerCatchClose())" catchMade="@selectedPhotoCatch" dialogIsOpen="@PhotoViewerCatchShown" url="@selectedPhotoCatch.CatchPhotoUrl" />
}

@if (selectedMeasureCatch != null & PhotoViewerMeasureShown == true)
{
    <PhotoViewer OnClose="@(() => PhotoViewerMeasureClose())" catchMade="@selectedMeasureCatch" dialogIsOpen="@PhotoViewerMeasureShown" url="@selectedMeasureCatch.MeasurePhotoUrl" />
}

@code {
    List<Catch> catches;
    List<Fish> fishOptions;
    public Catch currentCatch;
    bool EditDialogShown = false;
    bool DeleteDialogShown = false;
    bool PhotoViewerCatchShown = false;
    bool PhotoViewerMeasureShown = false;
    Catch selectedPhotoCatch;
    Catch selectedMeasureCatch;
    public IMatFileUploadEntry selectedMeasureFile;
    public IMatFileUploadEntry selectedCatchFile;

    protected async override Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("server");
        fishOptions = await client.GetFromJsonAsync<List<Fish>>("fish");
        catches = await client.GetFromJsonAsync<List<Catch>>("catch");
        if (catches.Count > 0)
        {
            currentCatch = catches.FirstOrDefault();
        }
        else
        {
            currentCatch = new Catch();
        }

    }

    private async void AddNewCatch()
    {
        Catch newCatch = new Catch
        {
            Length = 0,
            Fish = "Pike",
            CatchDate = DateTime.Now,
        };

        var client = ClientFactory.CreateClient("server");
        HttpResponseMessage response = await client.PostAsJsonAsync("catch", newCatch);
        if (response.StatusCode != System.Net.HttpStatusCode.Created)
        {
            StateHasChanged();
        }
        else
        {

            newCatch = await response.Content.ReadFromJsonAsync<Catch>();
            catches.Add(newCatch);
            currentCatch = newCatch;
            EditDialogShown = true;
            StateHasChanged();
        }
    }



    private void CancelEdit()
    {
        EditDialogShown = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        DeleteDialogShown = false;
        StateHasChanged();
    }

    private void ShowEditDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        EditDialogShown = true;
        StateHasChanged();
    }

    private void ShowDeleteDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        DeleteDialogShown = true;
        StateHasChanged();
    }

    private void DeleteCatch(Guid id)
    {
        var client = ClientFactory.CreateClient("server");
        client.DeleteAsync("catch/" + id);
        Catch catchToBeDeleted = catches.FirstOrDefault(e => e.Id == id);
        catches.Remove(catchToBeDeleted);
        DeleteDialogShown = false;

        // Delete photos
        client.DeleteAsync($"photo/{id}");
        StateHasChanged();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            currentCatch = catches.FirstOrDefault();
        }
        else
        {
            currentCatch = ((Catch)row);
        }

        this.StateHasChanged();
    }

    public void PhotoViewerShowCatch(Catch catchSelected)
    {
        selectedPhotoCatch = catchSelected;
        PhotoViewerCatchShown = true;
        StateHasChanged();
    }

    public void PhotoViewerShowMeasure(Catch catchSelected)
    {
        selectedMeasureCatch = catchSelected;
        PhotoViewerMeasureShown = true;
        StateHasChanged();
    }

    public void PhotoViewerCatchClose()
    {
        PhotoViewerCatchShown = false;
        StateHasChanged();
    }

    public void PhotoViewerMeasureClose()
    {
        PhotoViewerMeasureShown = false;
        StateHasChanged();
    }

    private async Task SaveCatch(Dictionary<string, IMatFileUploadEntry> catchFiles)
    {
        IMatFileUploadEntry selectedMeasureFile = catchFiles["measure"];
        IMatFileUploadEntry selectedCatchFile = catchFiles["catch"];
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Info, "Saving catch", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 500;
            config.VisibleStateDuration = 3000;
            config.HideTransitionDuration = 500;
        });

        var client = ClientFactory.CreateClient("server");
        StateHasChanged();

        // Upload photos
        if (selectedMeasureFile != null)
        {
            Photo measurePhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Measure };
            MemoryStream stream = new MemoryStream();
            await selectedMeasureFile.WriteToStreamAsync(stream);

            measurePhoto.ImageContent = stream.ToArray();
            stream.Close();
            HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", measurePhoto);
            if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
            {
                UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                currentCatch.MeasurePhotoUrl = photoResponse.PhotoUrl;
                currentCatch.MeasureThumbnailUrl = photoResponse.ThumbnailUrl;
            }
        }

        if (selectedCatchFile != null)
        {
            Photo catchPhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Catch };
            MemoryStream stream = new MemoryStream();
            await selectedCatchFile.WriteToStreamAsync(stream);

            catchPhoto.ImageContent = stream.ToArray();
            stream.Close();
            HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", catchPhoto);
            if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
            {
                UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                currentCatch.CatchPhotoUrl = photoResponse.PhotoUrl;
                currentCatch.CatchThumbnailUrl = photoResponse.ThumbnailUrl;
            }
        }

        HttpResponseMessage response = await client.PutAsJsonAsync("catch/" + currentCatch.Id, currentCatch);
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Warning, "Saving catch failed", "", config =>
            {
                config.ShowCloseButton = true;
                config.ShowProgressBar = true;
                config.MaximumOpacity = 100;

                config.ShowTransitionDuration = 250;
                config.VisibleStateDuration = 2000;
                config.HideTransitionDuration = 500;
            });
            StateHasChanged();
        }
        else
        {
            currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
            StateHasChanged();
        }
        selectedMeasureFile = null;
        selectedCatchFile = null;
        StateHasChanged();
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Success, "Catch saved", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 250;
            config.VisibleStateDuration = 2000;
            config.HideTransitionDuration = 500;
        });
        EditDialogShown = false;
        StateHasChanged();
    }
} 