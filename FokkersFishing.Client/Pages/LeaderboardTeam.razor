@page "/leaders/team"
@inject IHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@inject FokkersFishing.Client.Helpers.CompetitionState competitionState
@using System.ComponentModel
@using System.IO
@using FokkersFishing.Client.Helpers;
@attribute [Authorize(Roles = "Administrator, User")]

<h1>Fokkers Competition Team Leaderboard</h1>
 @if (competitionState.Active)
{
    @if (catches == null & currentTeam == null)
    {
        <p><em>Loading Team Catches Leaderboard...</em></p>
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        <div class="main">
            <h3>All Catches for team: <strong>@currentTeam.Name</strong></h3>

            <CatchComponent catches="@catches" competitionState="@competitionState" fishOptions="@fishOptions"
                            OnShowDelete="ShowDeleteDialog"
                            OnShowEditFull="ShowEditFullDialog"
                            viewState=Helpers.ViewStateEnum.Team
                            OnShowEdit="ShowEditDialog"
                            users="@users" />

            @if (scores == null)
            {
                <p><em>Loading Team Scores...</em></p>
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
            else
            {
                <h3>Fish List</h3>
                <MatTable Items="@scores" class="mat-elevation-z5" Striped="true"
                          RowClass="tester"
                          SortBy="TotalLength" PageSize="10"
                          ShowPaging="false">
                    <MatTableHeader>
                        <th width="30%">Fish</th>
                        <th width="30%">Total Fish Length</th>
                        <th width="30%">Total Fish Caught</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.Fish</td>
                        <td>@context.TotalLength</td>
                        <td>@context.FishCount</td>
                    </MatTableRow>
                </MatTable>

            }
        </div>
    }

    @if (currentCatch != null & EditDialogShown == true & !AdminEditFullCatch)
    {
        <EditCatch OnCancel="CancelEdit" OnSave="SaveCatch"
                   currentCatch="@currentCatch"
                   fishOptions="@fishOptions"
                   dialogIsOpen=@(EditDialogShown & !AdminEditFullCatch)
                   editState=Helpers.EditStateEnum.User
                   users="@users" />
    }

    @if (currentCatch != null & EditDialogShown == true & AdminEditFullCatch)
    {
        <EditCatch OnCancel="CancelEdit" OnSave="SaveCatch"
                   currentCatch="@currentCatch"
                   fishOptions="@fishOptions"
                   dialogIsOpen=@(EditDialogShown & AdminEditFullCatch)
                   editState=Helpers.EditStateEnum.UserFull
                   users="@users" />
    }
    
    @if (currentCatch != null & DeleteDialogShown == true)
    {
        <ConfirmCatchDelete OnCancel="CancelDelete" OnConfirm="@(() => DeleteCatch(currentCatch.Id))" catchMade="@currentCatch" dialogIsOpen="@DeleteDialogShown" />
    }
}
else
{
    <h4>No competition active. Team Leaderboard unavailable</h4>
}

@code {
    List<Catch> catches;
    List<TeamScore> scores;
    List<Fish> fishOptions;
    List<User> users;
    Team currentTeam;

    public Catch currentCatch;
    bool EditDialogShown = false;
    bool DeleteDialogShown = false;
    public bool clearPhotoState = false;
    public bool AdminEditFullCatch = false;

    public IMatFileUploadEntry selectedMeasureFile;
    public IMatFileUploadEntry selectedCatchFile;

    protected async override Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("server");
        if (competitionState.Active)
        {
            try
            {
                currentTeam = await client.GetFromJsonAsync<Team>("team/byuser");
                fishOptions = await client.GetFromJsonAsync<List<Fish>>("fish");
                users = await client.GetFromJsonAsync<List<User>>("adminuser/users");
                catches = await client.GetFromJsonAsync<List<Catch>>("leaderboard/team/" + competitionState.CompetitionId);
                scores = await client.GetFromJsonAsync<List<TeamScore>>("leaderboard/team/scores/" + competitionState.CompetitionId);
            }
            catch (Exception ex)
            {

            }
        }
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            currentCatch = catches.FirstOrDefault();
        }
        else
        {
            currentCatch = ((Catch)row);
        }

        this.StateHasChanged();
    }

    private void ShowEditDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        EditDialogShown = true;
        AdminEditFullCatch = false;
        StateHasChanged();
    }

    private void ShowEditFullDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        EditDialogShown = true;
        AdminEditFullCatch = true;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        EditDialogShown = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        DeleteDialogShown = false;
        StateHasChanged();
    }

    private void ShowDeleteDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        DeleteDialogShown = true;
        StateHasChanged();
    }

    private void DeleteCatch(Guid id)
    {
        var client = ClientFactory.CreateClient("server");
        client.DeleteAsync("catch/team/" + id);
        Catch catchToBeDeleted = catches.FirstOrDefault(e => e.Id == id);
        catches.Remove(catchToBeDeleted);
        DeleteDialogShown = false;

        // Delete photos
        client.DeleteAsync($"photo/{id}");
        StateHasChanged();
    }

    private async Task SaveCatch(EditDialogSaveResult saveResult)
    {
        clearPhotoState = saveResult.ClearPhotos;
        IMatFileUploadEntry selectedMeasureFile = saveResult.UploadFiles["measure"];
        IMatFileUploadEntry selectedCatchFile = saveResult.UploadFiles["catch"];

        var client = ClientFactory.CreateClient("server");
        HttpResponseMessage response = null;

        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Info, "Saving catch", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 2000;
        config.VisibleStateDuration = 5000;
        config.HideTransitionDuration = 500;
    });
        StateHasChanged();
        // Upload photos
        if (selectedMeasureFile != null)
        {
            Photo measurePhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Measure };
            MemoryStream stream = new MemoryStream();
            await selectedMeasureFile.WriteToStreamAsync(stream);

            measurePhoto.ImageContent = stream.ToArray();
            stream.Close();
            HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", measurePhoto);
            if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
            {
                UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                currentCatch.MeasurePhotoUrl = photoResponse.PhotoUrl;
                currentCatch.MeasureThumbnailUrl = photoResponse.ThumbnailUrl;
            }
        }

        if (selectedCatchFile != null)
        {
            Photo catchPhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Catch };
            MemoryStream stream = new MemoryStream();
            await selectedCatchFile.WriteToStreamAsync(stream);

            catchPhoto.ImageContent = stream.ToArray();
            stream.Close();
            HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", catchPhoto);
            if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
            {
                UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                currentCatch.CatchPhotoUrl = photoResponse.PhotoUrl;
                currentCatch.CatchThumbnailUrl = photoResponse.ThumbnailUrl;
            }
        }

        // Reset to pending
        currentCatch.Status = CatchStatusEnum.Pending;
        if (clearPhotoState)
        {
            currentCatch.CatchPhotoUrl = string.Empty;
            currentCatch.MeasurePhotoUrl = string.Empty;
            currentCatch.CatchThumbnailUrl = string.Empty;
            currentCatch.MeasureThumbnailUrl = string.Empty;
        }
        response = await client.PutAsJsonAsync("catch/" + currentCatch.Id, currentCatch);
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Warning, "Saving catch failed", "", config =>
            {
                config.ShowCloseButton = true;
                config.ShowProgressBar = true;
                config.MaximumOpacity = 100;

                config.ShowTransitionDuration = 1000;
                config.VisibleStateDuration = 2000;
                config.HideTransitionDuration = 500;
            });

            StateHasChanged();
        }
        else
        {
            if (clearPhotoState)
            {
                await client.DeleteAsync($"photo/{currentCatch.Id}");
            }
            currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
            StateHasChanged();
        }

        selectedMeasureFile = null;
        selectedCatchFile = null;
        StateHasChanged();
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Success, "Catch saved", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 750;
            config.VisibleStateDuration = 1500;
            config.HideTransitionDuration = 500;
        });
        EditDialogShown = false;
        StateHasChanged();
    }
}


