@page "/admincatches"
@inject IHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@inject FokkersFishing.Client.Helpers.CompetitionState competitionState
@using System.ComponentModel
@using System.IO
@attribute [Authorize(Roles = "Administrator")]

<div class="main">

    @if (catches == null & currentCatch == null)
    {
        <p><em>Loading all catches</em></p>
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        @if (competitionState.Active)
        {
            <MatCheckbox Label="Only show catches in competition" @bind-Value="OnlyShowCompetitionCatches" />
        }

        <MatTable Items="@catches" class="mat-elevation-z5" Striped="true"
                  RowClass="tester"
                  SortBy="Length"
                  PageSize="25"
                  FilterByColumnName="Fish"
                  ShowPaging="true">
            <MatTableHeader>
                <th width="10%">Catch #</th>
                <th width="30%">Catch Date</th>
                <th width="10%">Fish</th>
                <th width="20%">Fish Length</th>
                <th width="20%">Fisherman</th>
                <th width="20%">Catch</th>
                <th width="20%">Measure</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.GlobalCatchNumber</td>
                <td>@context.CatchDate</td>
                <td>@context.Fish</td>
                <td>@context.Length</td>
                <td>@context.UserName</td>
                <td>
                    <img src="@context.CatchThumbnailUrl" style=" max-width: 100%;height: auto;" @onclick="@(() => PhotoViewerShowCatch(context))" />
                </td>
                <td>
                    <img src="@context.MeasureThumbnailUrl" style=" max-width: 100%;height: auto;" @onclick="@(() => PhotoViewerShowMeasure(context))" />
                </td>
                <td>
                    @switch (context.Status)
                    {
                        case CatchStatusEnum.Approved:
                            {
                                <MatFAB Icon="@MatIconNames.Done_all" Label="Approved" style="color: lightgreen;background-color: green" />
                                <MatIconButton Icon="@MatIconNames.Edit" @onclick="@(() => ShowEditDialog(context.Id))"></MatIconButton>
                                <MatIconButton Icon="@MatIconNames.Delete" @onclick="@(() => ShowDeleteDialog(context.Id))"></MatIconButton>
                                break;
                            }
                        case CatchStatusEnum.Pending:
                            {
                                <MatFAB Icon="@MatIconNames.Schedule" Label="Pending" style="color: lightyellow;background-color:#ffc107" />
                                <MatIconButton Icon="@MatIconNames.Edit" @onclick="@(() => ShowEditDialog(context.Id))"></MatIconButton>
                                <MatIconButton Icon="@MatIconNames.Delete" @onclick="@(() => ShowDeleteDialog(context.Id))"></MatIconButton>

                                break;
                            }
                        case CatchStatusEnum.Rejected:
                            {
                                <MatFAB Icon="@MatIconNames.Pan_tool" Label="Rejected" style="color: darkgoldenrod;background-color:indianred" />
                                break;
                            }
                    }
                </td>
            </MatTableRow>
        </MatTable>
    }
</div>

@if (currentCatch != null & EditDialogShown == true)
{
    <EditCatch OnCancel="CancelEdit" OnSave="SaveCatch"
           currentCatch="@currentCatch"
           fishOptions="@fishOptions"
           dialogIsOpen="@EditDialogShown"
           adminEdit="true"
           users="@users"/>
}

@if (currentCatch != null & DeleteDialogShown == true)
{
    <ConfirmCatchDelete OnCancel="CancelDelete" OnConfirm="@(() => DeleteCatch(currentCatch.Id))" catchMade="@currentCatch" dialogIsOpen="@DeleteDialogShown" />
}

@if (selectedPhotoCatch != null & PhotoViewerCatchShown == true)
{
    <PhotoViewer OnClose="@(() => PhotoViewerCatchClose())" catchMade="@selectedPhotoCatch" dialogIsOpen="@PhotoViewerCatchShown" url="@selectedPhotoCatch.CatchPhotoUrl" />
}

@if (selectedMeasureCatch != null & PhotoViewerMeasureShown == true)
{
    <PhotoViewer OnClose="@(() => PhotoViewerMeasureClose())" catchMade="@selectedMeasureCatch" dialogIsOpen="@PhotoViewerMeasureShown" url="@selectedMeasureCatch.MeasurePhotoUrl" isAdmin=true />
}

@code {
    List<Catch> catches;
    List<Fish> fishOptions;
    List<User> users;

    public Catch currentCatch;
    bool EditDialogShown = false;
    bool DeleteDialogShown = false;
    bool PhotoViewerCatchShown = false;
    bool PhotoViewerMeasureShown = false;
    Catch selectedPhotoCatch;
    Catch selectedMeasureCatch;
    public IMatFileUploadEntry selectedMeasureFile;
    public IMatFileUploadEntry selectedCatchFile;
    private bool m_OnlyShowCompetitionCatches = true;
    public bool OnlyShowCompetitionCatches
    {
        get => m_OnlyShowCompetitionCatches;
        set
        {
            m_OnlyShowCompetitionCatches = value;
            ShowCompetitionCatchesChanged();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("server");
        fishOptions = await client.GetFromJsonAsync<List<Fish>>("fish");
        users = await client.GetFromJsonAsync<List<User>>("adminuser/users");
        await LoadCatches(client);
        client.Dispose();
    }

    private void CancelEdit()
    {
        EditDialogShown = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        DeleteDialogShown = false;
        StateHasChanged();
    }

    private void ShowEditDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        EditDialogShown = true;
        StateHasChanged();
    }

    private void ShowDeleteDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        DeleteDialogShown = true;
        StateHasChanged();
    }

    private void DeleteCatch(Guid id)
    {
        var client = ClientFactory.CreateClient("server");
        client.DeleteAsync("catch/admin/" + id);
        Catch catchToBeDeleted = catches.FirstOrDefault(e => e.Id == id);
        catches.Remove(catchToBeDeleted);
        DeleteDialogShown = false;

        // Delete photos
        client.DeleteAsync($"photo/{id}");
        StateHasChanged();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            currentCatch = catches.FirstOrDefault();
        }
        else
        {
            currentCatch = ((Catch)row);
        }

        this.StateHasChanged();
    }

    public void PhotoViewerShowCatch(Catch catchSelected)
    {
        selectedPhotoCatch = catchSelected;
        PhotoViewerCatchShown = true;
        StateHasChanged();
    }

    public void PhotoViewerShowMeasure(Catch catchSelected)
    {
        selectedMeasureCatch = catchSelected;
        PhotoViewerMeasureShown = true;
        StateHasChanged();
    }

    public void PhotoViewerCatchClose()
    {
        PhotoViewerCatchShown = false;
        StateHasChanged();
    }

    public void PhotoViewerMeasureClose()
    {
        PhotoViewerMeasureShown = false;
        StateHasChanged();
    }

    private async Task SaveCatch(Dictionary<string, IMatFileUploadEntry> catchFiles)
    {
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Info, "Saving catch", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 500;
            config.VisibleStateDuration = 3000;
            config.HideTransitionDuration = 500;
        });

        var client = ClientFactory.CreateClient("server");
        StateHasChanged();

        HttpResponseMessage response = await client.PutAsJsonAsync("catch/admin/" + currentCatch.Id, currentCatch);
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Warning, "Saving catch failed", "", config =>
            {
                config.ShowCloseButton = true;
                config.ShowProgressBar = true;
                config.MaximumOpacity = 100;

                config.ShowTransitionDuration = 250;
                config.VisibleStateDuration = 2000;
                config.HideTransitionDuration = 500;
            });
            StateHasChanged();
        }
        else
        {
            currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
            StateHasChanged();
        }
        StateHasChanged();
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Success, "Catch saved", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 250;
            config.VisibleStateDuration = 2000;
            config.HideTransitionDuration = 500;
        });
        EditDialogShown = false;
       
        StateHasChanged();
    }

    protected async Task ShowCompetitionCatchesChanged()
    {
        var client = ClientFactory.CreateClient("server");
        await LoadCatches(client);
        client.Dispose();
        StateHasChanged();
    }

    protected async Task LoadCatches(HttpClient client)
    {
        if (competitionState.Active == false | OnlyShowCompetitionCatches == false)
        {
            catches = await client.GetFromJsonAsync<List<Catch>>("catch/admin");
            if (catches.Count > 0)
            {
                currentCatch = catches.FirstOrDefault();
            }
            else
            {
                currentCatch = new Catch();
            }
        }
        else
        {
            catches = await client.GetFromJsonAsync<List<Catch>>("catch/admin/competition/" + competitionState.CompetitionId);
            if (catches.Count > 0)
            {
                currentCatch = catches.FirstOrDefault();
            }
            else
            {
                currentCatch = new Catch();
            }
        }
    }
}