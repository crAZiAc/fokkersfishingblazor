@page "/admincatches"
@inject IHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@inject CompetitionState competitionState
@using System.ComponentModel
@using FokkersFishing.Client.Helpers;
@using System.IO
@attribute [Authorize(Roles = "Administrator")]

 @if (catches != null & currentCatch != null)
{



    @if (competitionState.Active)
    {
        <h4> Only showing catches in competition</h4>
    }

    <button type="button" class="btn btn-primary" @onclick="@((x) => AddNewCatch())">Add new catch</button>

    <CatchComponent catches="@catches" competitionState="@competitionState" fishOptions="@fishOptions"
                    OnShowDelete="ShowDeleteDialog"
                    viewState=Helpers.ViewStateEnum.Admin
                    OnShowEdit="ShowEditDialog"
                    OnShowEditFull="ShowEditFullDialog"
                    users="@users" />

    @if (currentCatch != null & EditDialogShown & NewCatchAdded & !AdminEditFullCatch)
    {
        <EditCatch OnCancel="CancelEdit" OnSave="SaveCatchFull"
                   currentCatch="@currentCatch"
                   fishOptions="@fishOptions"
                   dialogIsOpen=@(EditDialogShown & NewCatchAdded & !AdminEditFullCatch)
                   editState=EditStateEnum.AdminAdd
                   users="@users" />
    }

    if (currentCatch != null & AdminEditFullCatch & EditDialogShown)
    {
        <EditCatch OnCancel="CancelEdit" OnSave="SaveCatchFull"
                   currentCatch="@currentCatch"
                   fishOptions="@fishOptions"
                   dialogIsOpen=@(EditDialogShown & AdminEditFullCatch)
                   editState=EditStateEnum.AdminEditFull
                   users="@users" />
    }

    if (currentCatch != null & EditDialogShown & (!AdminEditFullCatch & !NewCatchAdded))
    {
        <EditCatch OnCancel="CancelEdit" OnSave="SaveCatch"
                   currentCatch="@currentCatch"
                   fishOptions="@fishOptions"
                   dialogIsOpen=@(EditDialogShown & (!AdminEditFullCatch & !NewCatchAdded))
                   editState=EditStateEnum.Admin
                   users="@users" />
    }

    @if (currentCatch != null & DeleteDialogShown == true)
    {
        <ConfirmCatchDelete OnCancel="CancelDelete" OnConfirm="@(() => DeleteCatch(currentCatch.Id))" catchMade="@currentCatch" dialogIsOpen="@DeleteDialogShown" />
    }
}
else
{
    <p><em>Loading all catches</em></p>
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}

@code {
    List<Catch> catches;
    List<Catch> sortedCatches;
    List<Fish> fishOptions;
    List<User> users;

    public Catch currentCatch;
    bool EditDialogShown = false;
    bool DeleteDialogShown = false;
    public IMatFileUploadEntry selectedMeasureFile;
    public IMatFileUploadEntry selectedCatchFile;
    public bool NewCatchAdded = false;
    public bool AdminEditFullCatch = false;
    public bool clearPhotoState = false;

    protected async override Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("server");
        fishOptions = await client.GetFromJsonAsync<List<Fish>>("fish");
        users = await client.GetFromJsonAsync<List<User>>("adminuser/users");
        await LoadCatches(client);
        client.Dispose();
    }

    private void CancelEdit()
    {
        EditDialogShown = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        DeleteDialogShown = false;
        StateHasChanged();
    }

    private void ShowEditDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        EditDialogShown = true;
        StateHasChanged();
    }

    private void ShowEditFullDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        EditDialogShown = true;
        AdminEditFullCatch = true;
        StateHasChanged();
    }

    private void ShowDeleteDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        DeleteDialogShown = true;
        StateHasChanged();
    }

    private void DeleteCatch(Guid id)
    {
        var client = ClientFactory.CreateClient("server");
        client.DeleteAsync("catch/admin/" + id);
        Catch catchToBeDeleted = catches.FirstOrDefault(e => e.Id == id);
        catches.Remove(catchToBeDeleted);
        DeleteDialogShown = false;

        // Delete photos
        client.DeleteAsync($"photo/{id}");
        StateHasChanged();
    }

    private async Task SaveCatchFull(EditDialogSaveResult saveResult)
    {
        clearPhotoState = saveResult.ClearPhotos;
        IMatFileUploadEntry selectedMeasureFile = saveResult.UploadFiles["measure"];
        IMatFileUploadEntry selectedCatchFile = saveResult.UploadFiles["catch"];

        var client = ClientFactory.CreateClient("server");
        HttpResponseMessage response = null;
        if (NewCatchAdded)
        {
            // Upload photos
            if (selectedMeasureFile != null)
            {
                Toaster.Add($"New Catch, Type: {currentCatch.Fish}", MatToastType.Light, "Uploading measure photo", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 1500;
        config.VisibleStateDuration = 3000;
        config.HideTransitionDuration = 500;
    });
                Photo measurePhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Measure };
                MemoryStream stream = new MemoryStream();
                await selectedMeasureFile.WriteToStreamAsync(stream);

                measurePhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", measurePhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    currentCatch.MeasurePhotoUrl = photoResponse.PhotoUrl;
                    currentCatch.MeasureThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }

            if (selectedCatchFile != null)
            {
                Toaster.Add($"New Catch, Type: {currentCatch.Fish}", MatToastType.Light, "Uploading catch photo", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 1500;
        config.VisibleStateDuration = 3000;
        config.HideTransitionDuration = 500;
    });
                Photo catchPhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Catch };
                MemoryStream stream = new MemoryStream();
                await selectedCatchFile.WriteToStreamAsync(stream);

                catchPhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", catchPhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    currentCatch.CatchPhotoUrl = photoResponse.PhotoUrl;
                    currentCatch.CatchThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }

            // Create new catch
            Toaster.Add($"New Catch, Type: {currentCatch.Fish}", MatToastType.Info, "Creating catch data", "", config =>
    {
        config.ShowCloseButton = true;
        config.ShowProgressBar = true;
        config.MaximumOpacity = 100;

        config.ShowTransitionDuration = 750;
        config.VisibleStateDuration = 2000;
        config.HideTransitionDuration = 500;
    });
            response = await client.PostAsJsonAsync("catch", currentCatch);
            if (response.StatusCode != System.Net.HttpStatusCode.Created)
            {
                StateHasChanged();
            }
            else
            {
                currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
                catches.Add(currentCatch);
            }
            EditDialogShown = false;
            NewCatchAdded = false;
            AdminEditFullCatch = false;
            StateHasChanged();

        } // POST
        else
        {
            Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Info, "Saving catch", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 2000;
            config.VisibleStateDuration = 5000;
            config.HideTransitionDuration = 500;
        });
            StateHasChanged();
            // Upload photos
            if (selectedMeasureFile != null)
            {
                Photo measurePhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Measure };
                MemoryStream stream = new MemoryStream();
                await selectedMeasureFile.WriteToStreamAsync(stream);

                measurePhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", measurePhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    currentCatch.MeasurePhotoUrl = photoResponse.PhotoUrl;
                    currentCatch.MeasureThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }

            if (selectedCatchFile != null)
            {
                Photo catchPhoto = new Photo { Id = currentCatch.Id, PhotoType = PhotoTypeEnum.Catch };
                MemoryStream stream = new MemoryStream();
                await selectedCatchFile.WriteToStreamAsync(stream);

                catchPhoto.ImageContent = stream.ToArray();
                stream.Close();
                HttpResponseMessage responsePhoto = await client.PostAsJsonAsync<Photo>($"photo", catchPhoto);
                if (responsePhoto.StatusCode == System.Net.HttpStatusCode.Created)
                {
                    UploadPhotoResponse photoResponse = await responsePhoto.Content.ReadFromJsonAsync<UploadPhotoResponse>();
                    currentCatch.CatchPhotoUrl = photoResponse.PhotoUrl;
                    currentCatch.CatchThumbnailUrl = photoResponse.ThumbnailUrl;
                }
            }
            if (clearPhotoState)
            {
                currentCatch.CatchPhotoUrl = string.Empty;
                currentCatch.MeasurePhotoUrl = string.Empty;
                currentCatch.CatchThumbnailUrl = string.Empty;
                currentCatch.MeasureThumbnailUrl = string.Empty;
            }
            response = await client.PutAsJsonAsync("catch/" + currentCatch.Id, currentCatch);
            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Warning, "Saving catch failed", "", config =>
                {
                    config.ShowCloseButton = true;
                    config.ShowProgressBar = true;
                    config.MaximumOpacity = 100;

                    config.ShowTransitionDuration = 1000;
                    config.VisibleStateDuration = 2000;
                    config.HideTransitionDuration = 500;
                });

                StateHasChanged();
            }
            else
            {
                if (clearPhotoState)
                {
                    await client.DeleteAsync($"photo/{currentCatch.Id}");
                }
                currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
                
                StateHasChanged();
            }
        } // PUT


        selectedMeasureFile = null;
        selectedCatchFile = null;
        StateHasChanged();
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Success, "Catch saved", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 750;
            config.VisibleStateDuration = 1500;
            config.HideTransitionDuration = 500;
        });

        EditDialogShown = false;
        NewCatchAdded = false;
        AdminEditFullCatch = false;
        StateHasChanged();
    }

    private async Task SaveCatch(EditDialogSaveResult saveResult)
    {
        clearPhotoState = saveResult.ClearPhotos;
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Info, "Saving catch", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 500;
            config.VisibleStateDuration = 3000;
            config.HideTransitionDuration = 500;
        });

        var client = ClientFactory.CreateClient("server");
        StateHasChanged();

        HttpResponseMessage response = await client.PutAsJsonAsync("catch/admin/" + currentCatch.Id, currentCatch);
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Warning, "Saving catch failed", "", config =>
            {
                config.ShowCloseButton = true;
                config.ShowProgressBar = true;
                config.MaximumOpacity = 100;

                config.ShowTransitionDuration = 250;
                config.VisibleStateDuration = 2000;
                config.HideTransitionDuration = 500;
            });
            StateHasChanged();
        }
        else
        {
            currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
            StateHasChanged();
        }
        StateHasChanged();
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Success, "Catch saved", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 250;
            config.VisibleStateDuration = 2000;
            config.HideTransitionDuration = 500;
        });

        EditDialogShown = false;
        NewCatchAdded = false;
        AdminEditFullCatch = false;

        StateHasChanged();
    }

    private async void AddNewCatch()
    {
        Catch newCatch = new Catch
            {
                Length = 0,
                Id = Guid.NewGuid(),
                Fish = "Pike",
                CatchDate = DateTime.Now,
                Status = CatchStatusEnum.Pending
            };

        if (competitionState.Active)
        {
            newCatch.CompetitionId = competitionState.CompetitionId;
        }

        NewCatchAdded = true;
        currentCatch = newCatch;
        EditDialogShown = true;
        StateHasChanged();
    }

    protected async Task ShowCompetitionCatchesChanged()
    {
        var client = ClientFactory.CreateClient("server");
        await LoadCatches(client);
        client.Dispose();
        StateHasChanged();
    }

    protected async Task LoadCatches(HttpClient client)
    {
        if (competitionState.Active == false)
        {
            catches = await client.GetFromJsonAsync<List<Catch>>("catch/admin");
            if (catches.Count > 0)
            {
                currentCatch = catches.FirstOrDefault();
            }
            else
            {
                currentCatch = new Catch();
            }
        }
        else
        {
            catches = await client.GetFromJsonAsync<List<Catch>>("catch/admin/competition/" + competitionState.CompetitionId);
            if (catches.Count > 0)
            {
                currentCatch = catches.FirstOrDefault();
            }
            else
            {
                currentCatch = new Catch();
            }
        }
    }

}