@page "/admincatches"
@inject IHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@using System.ComponentModel
@using System.IO
@attribute [Authorize(Roles = "Administrator")]

<div class="main">

    @if (catches == null & currentCatch == null)
    {
        <p><em>Loading all catches</em></p>
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        @foreach (Catch catchRow in catches)
        {
            string image = string.Empty;
            string textColor = string.Empty;
            if (catchRow.CatchPhotoUrl != null)
            {
                image = catchRow.CatchPhotoUrl;
                textColor = "grey";
            }
            else
            {
                image = "https://fokkersfishingstorage.blob.core.windows.net/catches/NoCatch.png";
                textColor = "red";
            }
            <MatCard class="demo-mat-card">
                <MatCardContent>
                    <MatCardMedia Wide="true" ImageUrl="@image">
                        <div class="demo-mat-card-content" style="color: @textColor;">
                            <MatHeadline6 class="demo-mat-card-clean-margin">
                                Catch # @catchRow.CatchNumber (@catchRow.Fish - @catchRow.Length cm)
                                <br>
                                @catchRow.UserEmail
                            </MatHeadline6>
                            <MatSubtitle2 class="demo-mat-card-clean-margin">
                                Catch date: @catchRow.CatchDate.ToLocalTime()
                                <br />
                                Global Catch # @catchRow.GlobalCatchNumber
                            </MatSubtitle2>
                        </div>
                    </MatCardMedia>
                    <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                        Logged: @catchRow.LogDate.ToLocalTime()
                        <br />
                        Edited: @catchRow.EditDate.ToLocalTime()
                    </MatBody2>
                </MatCardContent>
                <MatCardActions>
                    <MatCardActionIcons>
                        @switch (catchRow.Status)
                        {
                            case CatchStatusEnum.Approved:
                                {
                                    <MatFAB Icon="@MatIconNames.Done_all" Label="Approved" style="color: lightgreen;background-color: green" />

                                    break;
                                }
                            case CatchStatusEnum.Pending:
                                {
                                    <MatFAB Icon="@MatIconNames.Schedule" Label="Pending" style="color: lightyellow;background-color:#ffc107" />
                                    break;
                                }
                            case CatchStatusEnum.Rejected:
                                {
                                    <MatFAB Icon="@MatIconNames.Pan_tool" Label="Rejected" style="color: indianred;background-color:red" />
                                    break;
                                }
                        }
                        <MatIconButton Icon="@MatIconNames.Photo" @onclick="@(() => PhotoViewerShowMeasure(catchRow))"></MatIconButton>
                        <MatIconButton Icon="@MatIconNames.Edit" @onclick="@(() => ShowEditDialog(catchRow.Id))"></MatIconButton>
                        <MatIconButton Icon="@MatIconNames.Delete" @onclick="@(() => ShowDeleteDialog(catchRow.Id))"></MatIconButton>
                    </MatCardActionIcons>
                </MatCardActions>
            </MatCard>
        }
    }
</div>

@if (currentCatch != null & EditDialogShown == true)
{
    <EditCatch OnCancel="CancelEdit" OnSave="SaveCatch"
           currentCatch="@currentCatch"
           fishOptions="@fishOptions"
           dialogIsOpen="@EditDialogShown"
           adminEdit="true"/>
}

@if (currentCatch != null & DeleteDialogShown == true)
{
    <ConfirmCatchDelete OnCancel="CancelDelete" OnConfirm="@(() => DeleteCatch(currentCatch.Id))" catchMade="@currentCatch" dialogIsOpen="@DeleteDialogShown" />
}

@if (selectedPhotoCatch != null & PhotoViewerCatchShown == true)
{
    <PhotoViewer OnClose="@(() => PhotoViewerCatchClose())" catchMade="@selectedPhotoCatch" dialogIsOpen="@PhotoViewerCatchShown" url="@selectedPhotoCatch.CatchPhotoUrl" />
}

@if (selectedMeasureCatch != null & PhotoViewerMeasureShown == true)
{
    <PhotoViewer OnClose="@(() => PhotoViewerMeasureClose())" catchMade="@selectedMeasureCatch" dialogIsOpen="@PhotoViewerMeasureShown" url="@selectedMeasureCatch.MeasurePhotoUrl" />
}

@code {
    List<Catch> catches;
    List<Fish> fishOptions;

    public Catch currentCatch;
    bool EditDialogShown = false;
    bool DeleteDialogShown = false;
    bool PhotoViewerCatchShown = false;
    bool PhotoViewerMeasureShown = false;
    Catch selectedPhotoCatch;
    Catch selectedMeasureCatch;
    public IMatFileUploadEntry selectedMeasureFile;
    public IMatFileUploadEntry selectedCatchFile;

    protected async override Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("server");
        fishOptions = await client.GetFromJsonAsync<List<Fish>>("fish");
        catches = await client.GetFromJsonAsync<List<Catch>>("catch/admin");
        if (catches.Count > 0)
        {
            currentCatch = catches.FirstOrDefault();
        }
        else
        {
            currentCatch = new Catch();
        }

    }

    private void CancelEdit()
    {
        EditDialogShown = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        DeleteDialogShown = false;
        StateHasChanged();
    }

    private void ShowEditDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        EditDialogShown = true;
        StateHasChanged();
    }

    private void ShowDeleteDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        DeleteDialogShown = true;
        StateHasChanged();
    }

    private void DeleteCatch(Guid id)
    {
        var client = ClientFactory.CreateClient("server");
        client.DeleteAsync("catch/admin/" + id);
        Catch catchToBeDeleted = catches.FirstOrDefault(e => e.Id == id);
        catches.Remove(catchToBeDeleted);
        DeleteDialogShown = false;

        // Delete photos
        client.DeleteAsync($"photo/{id}");
        StateHasChanged();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            currentCatch = catches.FirstOrDefault();
        }
        else
        {
            currentCatch = ((Catch)row);
        }

        this.StateHasChanged();
    }

    public void PhotoViewerShowCatch(Catch catchSelected)
    {
        selectedPhotoCatch = catchSelected;
        PhotoViewerCatchShown = true;
        StateHasChanged();
    }

    public void PhotoViewerShowMeasure(Catch catchSelected)
    {
        selectedMeasureCatch = catchSelected;
        PhotoViewerMeasureShown = true;
        StateHasChanged();
    }

    public void PhotoViewerCatchClose()
    {
        PhotoViewerCatchShown = false;
        StateHasChanged();
    }

    public void PhotoViewerMeasureClose()
    {
        PhotoViewerMeasureShown = false;
        StateHasChanged();
    }

    private async Task SaveCatch(Dictionary<string, IMatFileUploadEntry> catchFiles)
    {
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Info, "Saving catch", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 500;
            config.VisibleStateDuration = 3000;
            config.HideTransitionDuration = 500;
        });

        var client = ClientFactory.CreateClient("server");
        StateHasChanged();

        HttpResponseMessage response = await client.PutAsJsonAsync("catch/admin/" + currentCatch.Id, currentCatch);
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Warning, "Saving catch failed", "", config =>
            {
                config.ShowCloseButton = true;
                config.ShowProgressBar = true;
                config.MaximumOpacity = 100;

                config.ShowTransitionDuration = 250;
                config.VisibleStateDuration = 2000;
                config.HideTransitionDuration = 500;
            });
            StateHasChanged();
        }
        else
        {
            currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
            StateHasChanged();
        }
        StateHasChanged();
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Success, "Catch saved", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 250;
            config.VisibleStateDuration = 2000;
            config.HideTransitionDuration = 500;
        });
        EditDialogShown = false;
        StateHasChanged();
    }
}