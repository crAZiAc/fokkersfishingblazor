@page "/pendingcatches"
@inject IHttpClientFactory ClientFactory
@inject IMatToaster Toaster
@inject FokkersFishing.Client.Helpers.CompetitionState competitionState
@using System.ComponentModel
@using System.IO
@attribute [Authorize(Roles = "Administrator")]

<div class="main">

    @if (catches == null & currentCatch == null)
    {
        <p><em>Loading pending catches</em></p>
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        @if (competitionState.Active)
        {
            <h4> Only showing catches in competition</h4>
        }
        <CatchComponent catches="@catches" competitionState="@competitionState" fishOptions="@fishOptions"
                        OnShowDelete="ShowDeleteDialog"
                        OnShowEdit="ShowEditDialog"
                        users="@users" />
    }
</div>

@if (currentCatch != null & EditDialogShown == true)
{
    <EditCatch OnCancel="CancelEdit" OnSave="SaveCatch"
               currentCatch="@currentCatch"
               fishOptions="@fishOptions"
               dialogIsOpen="@EditDialogShown"
               adminEdit="true"
               users="@users" />
}

@if (currentCatch != null & DeleteDialogShown == true)
{
    <ConfirmCatchDelete OnCancel="CancelDelete" OnConfirm="@(() => DeleteCatch(currentCatch.Id))" catchMade="@currentCatch" dialogIsOpen="@DeleteDialogShown" />
}


@code {
    List<Catch> catches;
    List<Fish> fishOptions;
    List<User> users;

    public Catch currentCatch;
    bool EditDialogShown = false;
    bool DeleteDialogShown = false;
    public IMatFileUploadEntry selectedMeasureFile;
    public IMatFileUploadEntry selectedCatchFile;

    protected async override Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("server");
        fishOptions = await client.GetFromJsonAsync<List<Fish>>("fish");
        users = await client.GetFromJsonAsync<List<User>>("adminuser/users");
        await LoadCatches(client);
    }

    private void CancelEdit()
    {
        EditDialogShown = false;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        DeleteDialogShown = false;
        StateHasChanged();
    }

    private void ShowEditDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        EditDialogShown = true;
        StateHasChanged();
    }

    private void ShowDeleteDialog(Guid id)
    {
        currentCatch = catches.FirstOrDefault(e => e.Id == id);
        DeleteDialogShown = true;
        StateHasChanged();
    }

    private void DeleteCatch(Guid id)
    {
        var client = ClientFactory.CreateClient("server");
        client.DeleteAsync("catch/admin/" + id);
        Catch catchToBeDeleted = catches.FirstOrDefault(e => e.Id == id);
        catches.Remove(catchToBeDeleted);
        DeleteDialogShown = false;

        // Delete photos
        client.DeleteAsync($"photo/{id}");
        StateHasChanged();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            currentCatch = catches.FirstOrDefault();
        }
        else
        {
            currentCatch = ((Catch)row);
        }

        this.StateHasChanged();
    }
  
    private async Task SaveCatch()
    {
        Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Info, "Saving catch", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 500;
            config.VisibleStateDuration = 3000;
            config.HideTransitionDuration = 500;
        });

        var client = ClientFactory.CreateClient("server");
        StateHasChanged();

        HttpResponseMessage response = await client.PutAsJsonAsync("catch/admin/" + currentCatch.Id, currentCatch);
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Warning, "Saving catch failed", "", config =>
            {
                config.ShowCloseButton = true;
                config.ShowProgressBar = true;
                config.MaximumOpacity = 100;

                config.ShowTransitionDuration = 250;
                config.VisibleStateDuration = 2000;
                config.HideTransitionDuration = 500;
            });
            StateHasChanged();
        }
        else
        {
            currentCatch = await response.Content.ReadFromJsonAsync<Catch>();
            Toaster.Add($"Catch #: {currentCatch.CatchNumber}, Type: {currentCatch.Fish}", MatToastType.Success, "Catch saved", "", config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 250;
            config.VisibleStateDuration = 2000;
            config.HideTransitionDuration = 500;
        });
            StateHasChanged();
        }
        EditDialogShown = false;
        if (currentCatch.Status != CatchStatusEnum.Pending)
        {
            catches.Remove(currentCatch);
        }
        StateHasChanged();
    }

    protected async Task LoadCatches(HttpClient client)
    {
        if (competitionState.Active == false)
        {
            catches = await client.GetFromJsonAsync<List<Catch>>("catch/admin/pending");
            if (catches.Count > 0)
            {
                currentCatch = catches.FirstOrDefault();
            }
            else
            {
                currentCatch = new Catch();
            }
        }
        else
        {
            catches = await client.GetFromJsonAsync<List<Catch>>("catch/admin/pending/competition/" + competitionState.CompetitionId);
            if (catches.Count > 0)
            {
                currentCatch = catches.FirstOrDefault();
            }
            else
            {
                currentCatch = new Catch();
            }
        }
    }
}